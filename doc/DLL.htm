<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=us-ascii">
<title>How to use the Ghostscript Dynamic Link Library (DLL)</title>
<!-- Originally: dll.txt -->
<link rel="stylesheet" type="text/css" href="gs.css" title="Ghostscript Style">
</head>

<body>
<!-- [1.0 begin visible header] ============================================ -->

<!-- [1.1 begin headline] ================================================== -->

<h1>How to use the Ghostscript Dynamic Link Library (DLL)</h1>

<!-- [1.1 end headline] ==================================================== -->

<!-- [1.2 begin table of contents] ========================================= -->

<h2>Table of contents</h2>

<ul>
<li><a href="#DLL">What is the Ghostscript DLL?</a>
<li><a href="#Common_functions">Platform-independent DLL functions</a>
<ul>
<li><a href="#revision"><code>gsdll_revision()</code></a>
<li><a href="#init"><code>gsdll_init()</code></a>
<li><a href="#execute_begin"><code>gsdll_execute_begin()</code></a>
<li><a href="#execute_cont"><code>gsdll_execute_cont()</code></a>
<li><a href="#execute_end"><code>gsdll_execute_end()</code></a>
<li><a href="#exit"><code>gsdll_exit()</code></a>
</ul>

<!-- [1.2 end table of contents] =========================================== -->

<!-- [1.3 begin hint] ====================================================== -->

<p>For other information, see the <a href="Readme.htm">Ghostscript
overview</a>.

<p>
<b>WARNING: The API described in this document is obsolete and will
be removed in the future.</b> 
The current Ghostscript Interpreter API 
is described in <a href="API.htm">API.htm</a>.

<!-- [1.3 end hint] ======================================================== -->

<hr>

<!-- [1.0 end visible header] ============================================== -->

<!-- [2.0 begin contents] ================================================== -->

<h2><a name="DLL"></a>What is the Ghostscript DLL?</h2>

<p>
For the OS/2 and Win32 platforms, Ghostscript is built as a dynamic
link library (DLL), and to provide the interface described in the <a
href="Use.htm">usage documentation</a>, a smaller independent executable
(<code>.EXE</code>) loads this DLL, which provides all the interaction
with the windowing system, including image windows and, if necessary, a
text window.  This document describes the DLL interface, which consists of
eight main functions, <a href="#functions">seven platform-independent
ones</a> provided by the DLL and one, <a href="#Callback">the callback
function</a>, provided by the caller.  The DLL provides some other
platform-specific functions for display devices.

<p>
The DLL's name and characteristics differ among the three platforms:

<ul>
<li>The <a href="#OS2_device">OS/2 DLL <code>GSDLL2.DLL</code></a> has
MULTIPLE NONSHARED data segments and can be called by multiple programs
simultaneously.

<li>The <a href="#Win_device">Win32 DLL <code>GSDLL32.DLL</code></a> has
MULTIPLE NONSHARED data segments.  Under Win32s it can be used by only one
program at a time, but under Windows 95/98 or Windows NT it can be called by
multiple programs simultaneously.

</ul>

<p>
The source for the executable is in <code>dp</code>*.* (OS/2) and
<code>dw</code>*.* (Windows).  See these source files for examples of
how to use the DLL.

<hr>

<h2><a name="Common_functions"></a>Platform-independent DLL functions</h2>

<p>
The seven functions provided by the DLL are
<ul>
<li><code>int GSDLLAPI <a href="#revision">gsdll_revision</a>(char **product, char **copyright, long *gs_revision, long *gs_revisiondate)</code>
<li><code>int GSDLLAPI <a href="#init">gsdll_init</a>(GSDLL_CALLBACK callback, HWND hwnd, int argc, char *argv[]);</code>
<li><code>int GSDLLAPI <a href="#execute_begin">gsdll_execute_begin</a>(void);</code>
<li><code>int GSDLLAPI <a href="#execute_cont">gsdll_execute_cont</a>(const char *str, int len);</code>
<li><code>int GSDLLAPI <a href="#execute_end">gsdll_execute_end</a>(void);</code>
<li><code>int GSDLLAPI <a href="#exit">gsdll_exit</a>(void);</code>

<p>
where <code>GSDLLAPI</code> is defined under OS/2 as

<blockquote><code>
#define GSDLLAPI
</code></blockquote>

<p>
and under MS Windows as

<blockquote><code>
#define GSDLLAPI CALLBACK _export
</code></blockquote>
</ul>

<h3><a name="revision"></a><code>gsdll_revision()</code></h3>

<blockquote>
This function returns the revision numbers and strings of the Ghostscript
DLL; you should call it before <code>gsdll_init()</code> to make sure
that the correct version of the Ghostscript DLL has been loaded.  For
example

<blockquote>
<pre>char *product;
char *copyright;
long revision;
long revisiondate;
gsdll_revision(&amp;product, &amp;copyright, &amp;revision, &amp;revisiondate);
</pre></blockquote>

<p>
You may use <code>NULL</code> pointers if you do not want a particular
value.
</blockquote>

<h3><a name="init"></a><code>gsdll_init()</code></h3>

<blockquote>
<code>gsdll_init()</code> must be called after loading the DLL and
before executing any Ghostscript commands.  The arguments are the address
of the callback function, a parent window handle, the count of arguments
and an array of pointers to the arguments.  For example

<blockquote>
<pre>char *argv[5];
argv[0] = "gswin.exe";
argv[1] = "-Ic:\\gs;c:\gs\\fonts";
argv[2] = "-dNOPAUSE",
argv[3] = "-sDEVICE=djet500",
argv[4] = NULL;
argc = 4;

code = gsdll_init(gsdll_callback, hwnd, argc, argv);
</pre></blockquote>

<p>
<code>hwnd</code> is used as the parent window handle for any windows
created by Ghostscript.  <code>hwnd</code> may be <code>NULL</code>
if the caller has no windows, but if it is <code>NULL</code>, you should
avoid using devices which may open windows.

<p>
A return code of 0 (zero) indicates no errors, and the code may now call
<code>gsdll_execute_begin()</code> or <code>gsdll_exit()</code>.  If
the return value is non-zero then <code>gsdll_exit()</code> must not be
called.

<p>
A return value of <code>GSDLL_INIT_QUIT</code> indicates that one of the
command line files or arguments called "<code>quit</code>", or that
Ghostscript was reading stdin and reached end-of-file.  This is not an
error.  <code>gsdll_exit()</code> must not be called.

<p>
A return value of <code>GSDLL_INIT_IN_USE</code> indicates that the DLL
is in use by another application (Windows 3.1 only).  The DLL should be
immediately unloaded (or the caller terminated).
<code>gsdll_exit()</code> must not be called.
</blockquote>

<h3><a name="execute_begin"></a><code>gsdll_execute_begin()</code></h3>

<blockquote>
This must be called after <code>gsdll_init()</code> and before
<code>gsdll_execute_cont()</code>.
</blockquote>

<h3><a name="execute_cont"></a><code>gsdll_execute_cont()</code></h3>

<blockquote>
After successfully calling <code>gsdll_init()</code> and
<code>gsdll_execute_begin()</code>, commands may be given to Ghostscript
with <code>gsdll_execute_cont()</code>.  Examples are:

<blockquote>
<pre>char *command = "1 2 add == flush\n";
code = gsdll_execute_cont(command, strlen(command));
command = "qu"
code = gsdll_execute_cont(command, strlen(command));
command = "it\n"
code = gsdll_execute_cont(command, strlen(command));
</pre>

<a name="cont_returns"></a>
<table cellpadding=0 cellspacing=0>
<tr><th colspan=3 bgcolor="#CCCC00"><hr><font size="+1">Return codes from <code>gsdll_execute_cont()</code></font><hr>
<tr valign=bottom>
	<th align=left>Code
	<td>&nbsp;&nbsp;&nbsp;&nbsp;
	<th align=left>Status
<tr>	<td colspan=3><hr>
<tr valign=top>	<td align=left>0
	<td>&nbsp;
	<td>No errors
<tr valign=top>	<td align=left>&lt; 0
	<td>&nbsp;
	<td>Error
<tr valign=top>	<td align=left>&lt;= -100
	<td>&nbsp;
	<td>"<code>quit</code>" has been executed, or fatal error.
<code>gsdll_exit()</code> must then be called: do not call
<code>gsdll_execute_end()</code>.
</table>
</blockquote>

<code>gsdll_execute_cont()</code>
does not flush stdio, so if you want to see output from Ghostscript you
must do this explicitly as shown in the example above.

<p>
When executing a string with <code>gsdll_execute_cont()</code>,
<code>currentfile</code> is the input from
<code>gsdll_execute_cont()</code>.  Reading from <code>%stdin</code>
uses the callback.

<p>
Please note that there is a 64 KB length limit on the passed string.
If you have more than 65535 bytes of input to process at a given time,
it must be split into separate smaller buffers, each passed on a 
separate call.

</blockquote>

<h3><a name="execute_end"></a><code>gsdll_execute_end()</code></h3>

<blockquote>
If <code>gsdll_execute_cont()</code> did not return an error, then
<code>gsdll_execute_end()</code> must be called after
<code>gsdll_execute_cont()</code> and before
<code>gsdll_exit()</code>.
</blockquote>

<h3><a name="exit"></a><code>gsdll_exit()</code></h3>

<blockquote>
Call gsdll_exit() to terminate the Ghostscript DLL.  It must be called if a
fatal error has occurred; see the <a href="#cont_returns">return value
of <code>gsdll_execute_cont()</code></a>.  After calling
<code>gsdll_exit()</code>, there are two options:

<ul>
<li>Unload the DLL, either by terminating the application or by
calling <code>DosFreeModule</code> (OS/2) or <code>FreeLibrary</code> (MS Windows).

<li>Call <code>gsdll_init()</code> again to restart Ghostscript.
</ul>
</blockquote>

<h2><a name="Callback"></a>Callback function</h2>

<blockquote>
As an argument to <a href="#init"><code>gsdll_init()</code></a> the
caller must provide a callback function which the DLL invokes for stdio and
to notify the caller about device events.  The function provided by the
caller has this prototype:

<blockquote><code>
int gsdll_callback(int&nbsp;message, char&nbsp;*str, unsigned&nbsp;long&nbsp;count);
</code></blockquote>

<p>
The Pascal calling convention is not used.  An example callback function
is:

<blockquote>
<pre>int
gsdll_callback(int message, char *str, unsigned long count)
{
char *p;
    switch (message) {
        case GSDLL_STDIN:
            p = fgets(str, count, stdin);
            if (p)
                return strlen(str);
            else
                return 0;
        case GSDLL_STDOUT:
            if (str != (char *)NULL)
                fwrite(str, 1, count, stdout);
            return count;
        case GSDLL_DEVICE:
            fprintf(stdout,"Callback: DEVICE %p %s\n", str,
                count ? "open" : "close");
            break;
        case GSDLL_SYNC:
            fprintf(stdout,"Callback: SYNC %p\n", str);
            break;
        case GSDLL_PAGE:
            fprintf(stdout,"Callback: PAGE %p\n", str);
            break;
        case GSDLL_SIZE:
            fprintf(stdout,"Callback: SIZE %p width=%d height=%d\n", str,
                (int)(count &amp; 0xffff), (int)((count&gt;&gt;16) &amp; 0xffff) );
            break;
        case GSDLL_POLL:
            return 0; /* no error */
        default:
            fprintf(stdout,"Callback: Unknown message=%d\n",message);
            break;
    }
    return 0;
}
</pre>

<table cellpadding=0 cellspacing=0>
<tr><th colspan=5 bgcolor="#CCCC00"><hr><font size="+1">Messages used by callback</font><hr>
<tr valign=bottom>
	<th align=left>Symbol
	<td>&nbsp;&nbsp;
	<th align=left>
	<td>&nbsp;&nbsp;
	<th align=left>Use
<tr>	<td colspan=5><hr>
<tr valign=top>	<td><code>GSDLL_STDIN</code>
	<td>&nbsp;
	<td>1
	<td>&nbsp;
	<td>get <code>count</code> characters to <code>str</code> from stdin, return number of characters read
<tr valign=top>	<td><code>GSDLL_STDOUT</code>
	<td>&nbsp;
	<td>2
	<td>&nbsp;
	<td>put <code>count</code> characters from <code>str</code>
		to stdout, return number of characters written
<tr valign=top>	<td><code>GSDLL_DEVICE</code>
	<td>&nbsp;
	<td>3
	<td>&nbsp;
	<td>device <code>str</code> has been opened if
		<code>count</code>&nbsp;=&nbsp;1, closed if
		<code>count</code>&nbsp;=&nbsp;0
<tr valign=top>	<td><code>GSDLL_SYNC</code>
	<td>&nbsp;
	<td>4
	<td>&nbsp;
	<td>sync_output for device <code>str</code>
<tr valign=top>	<td><code>GSDLL_PAGE</code>
	<td>&nbsp;
	<td>5
	<td>&nbsp;
	<td>output_page for device <code>str</code>
<tr valign=top>	<td><code>GSDLL_SIZE</code>
	<td>&nbsp;
	<td>6
	<td>&nbsp;
	<td>resize for device <code>str</code>:
		LOWORD(<code>count</code>) is new <code>xsize</code>,
		HIWORD(<code>count</code>) is new <code>ysize</code>
<tr valign=top>	<td><code>GSDLL_POLL</code>
	<td>&nbsp;
	<td>7
	<td>&nbsp;
	<td>Called from <code>gp_check_interrupt()</code><br>
		Can be used by the caller to poll the message queue.
		Normally returns 0.  To abort
		<code>gsdll_execute_cont()</code>, return a non-zero
		error code until <code>gsdll_execute_cont()</code>
		returns.
</table>
</blockquote>
</blockquote>

<hr>

<!-- [2.0 end contents] ==================================================== -->

<!-- [3.0 begin visible trailer] =========================================== -->
<hr>

<p>
<small>Copyright &copy; 2000-2006 Artifex Software, Inc.  All rights reserved.</small>

<p>
This software is provided AS-IS with no warranty, either express or
implied.

This software is distributed under license and may not be copied, modified
or distributed except as expressly authorized under the terms of that
license.  Refer to licensing information at http://www.artifex.com/
or contact Artifex Software, Inc.,  7 Mt. Lassen Drive - Suite A-134,
San Rafael, CA  94903, U.S.A., +1(415)492-9861, for further information.

<p>
<small>Ghostscript version 9.19, 23 March 2016

<!-- [3.0 end visible trailer] ============================================= -->

</body>
</html>
