   Copyright (C) 1996, 1997 Aladdin Enterprises.  All rights reserved.
   Unauthorized use, copying, and/or distribution prohibited.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

This file, NEWS-PCL, describes the changes in the most recent releases of
Aladdin's PCL5 code, in reverse chronological order.

Version 0.42 (??/??/98)

- removed borland makefile from pcl directory.  It was the pclxl file.
- removed outdated font message in the README file.
- added back README file which mysteriously disappeared in the last
  release.
- 


Version 0.41 (11/26/97)

All functionality of the pcl5e fts is now included.  Here is what is
new with pcl 0.41:
-pcl alphanumeric id command (ESC & n <count> W [operation][string
ID]) (pcsfont.c)
-Assign font id to copy of current font (ESC * c 6 F).  (pcsfont.c)
-Variable text path (ESC & c # T).  (pctext.c)
-pcl text parsing method was partially implemented now it is fully
implemented.

These functions are still not implemented and are not sported in the
fts:

-Select default font (ESC (|) 3 @).  (pcfont.c)
-Conditional pattern rotation (ESC * p # R).  (pcprint.c)
-Continuation blocks for character data (for ESC ( s # W).
-Double-byte characters (LM command is implemented but has no
 effect).

This is not implemented and is part of the fts, but does not result in
erroneous output:
-media select of pcl alphanumeric id command (ESC & n <count> W) (see
new functionality above) is not supported.  It requires interaction
with the control panel.


Known problems:
1) GS does not support grid centered fill model so a number of the fts PP
placement panels do not produce the correct output.  Fills should drop
one row and one column of pixels when "grid centering" is enabled.
2) GS bug for triangular joins manifests in the GL/2 portion of the
pcl5e (e.g. 1493).  Seems like ccw case does not work and cw does.
3) We lack complete symbol font set coverage.  The current fonts do not
provide all of the symbols.
4) There is a very small difference in space width which is only
noticeable as an accumulation error after a long line of characters.
We are using the space width value from the fonts which comes very
close to the actual HP value.
5) GL/2 fill types FT3, FT4 do not support non-zero winding and
even/odd filling - A bounding box for the object is filled and
subsequently clipped in device space to the perimeter of the polygon.
6) A downloaded intellifont that shows up in several fts panels
(e.g. 2502) has the value 0xffff for the number of auxillary
coordinates.  PCL sets the value to zero, prints an error message and
rasterizes without using auxillary coordinates resulting in a
misprinted character (char 116 't').
8) the character substitution model is not correct but is optimized to
display as many symbols as possible given our font collection.  It
simply selects the closest matching font that contains the missing symbol.
9) the escapement for vertical characters is wrong.
10) several fts panels (e.g. 2381) use logical operation 85 or not
destination.  We implement this correctly the 6mp does not seem to
support it.
12) GS single dots default orientation is wrong.  0 lenghth lines are
project parallel to the current hpgl/2 X-axis.

The scope of problems 3, 4, 6, 8, and 9 cannot be exactly determined
without a compatible font solution.

Bug fixes and other changes:

-removed hpgl_clear_state(), -Z@ suffices.
-pgvector.c incorrect parameters given for
hpgl_print_symbol_mode_char(), harmless but wrong.
-pgmand.h added missing prototype decorations.
-pglabel.c label origin 21 not correct - needs be set in user space
not plu space as other origin offsets are handled.
-pgdraw.c gs_setdotlength used always now, not just for dash.
-pgconfig.c SC now updates the CR point contrary to the documentation.
Also, simplification of SC command.
-pctext.c the hack for bound true type fonts being indexed from 0xf000
should only apply to internal fonts.
-state changes to support switching back and forth between numeric id'
and alphanumeric id's.  Only used for soft fonts and macros.
-pcifont.c removed - absorbed into the PL library.
-pcfsel.c - recompute substitute font hack added (see new
functionality section).  Some reorganization.
-pcommand.c - float_value() lacked a cast to int, losing sign when
cast to float.
-pgdraw.c - Testing on the 6mp indicates if pen 0 (white) is active
GL/2 always selects a solid white pattern irrespective of current fill
type.  This does not seem right and might be a 6mp bug but now we
emulated that behavior.
-pclfont.c - changed character complement to reflect MSL symbol codes for 
wingdings and symbol fonts.
-pginit.c - added limit clamping to prevent overflow on several CET
tests.  This is probably not a sufficient fix if complete CET
compliance is needed.
-pgdraw.c - code to adjust anchor corner for hpgl/2 vector fills.
Cases where the anchor is greater than the origin of the filled object
are now handled correctly.  Also, simplified filling code a bit more.
-pgconfig.c - hpgl's SC now updates carriage return position.
-pgvector.c - hpgl's CI was not returning the pen to the center
position in all circumstances.
-pgpoly.c - exiting polygon mode does not restore the previous pen
relative status but it does restore position and up/down status.
-makefile - the usual "missing" include file fixes (this should be
automated).

Version 0.40 (11/26/97)

-rtmisc.c - changed comments, pcl_source_transparent() changed to only
update state source transparency; moved gs call to
pcl_set_drawing_color().
-pgvector.c - hpgl_plot() update for symbol mode (see below).  Also,
changed/removed obsolete comments.
-pgstate.h - edited obsolete comments.
-pgpoly.c - sweep angles of 360 degrees no longer uses arc 3 point, now
uses arc code directly.
-pglfill.c - comment to check if updating transparency mode in gl/2
needs also updates source/texture transparency in pcl, like MC updates
pcl's logical op.
-pglfill.c hpgl_SM() - parsing command incorrectly continued parse
after getting the symbol, then reaching the ';' the code set the
symbol code back to '\0'.  We now return upon getting a symbol and let
the parser discard the semicolon.
-pglfill.c hpgl_MC() - default opcode for mode 1 was 255 instead of 252.
-pglfill.c hpgl_PP() - moved this function from pgcolor.c.
-pglfill.c hpgl_PP() - default fill mode should be adjust, not centered.
-pglabel.c hpgl_print_symbol_mode_character() - interface for printing
characters in symbol mode - (first attempt at symbol mode)
-pglabel.c - reworked comments.
-pginit.c - reworked comments.
-pggeom.c: hpgl_compute_arc_coords() redone to use gs library's sin
and cos functions.
-pgframe.c - cleanup.
-pgdraw.h - added hpgl_set_drawing_color() to the interface, needed by
character code.
-pgdraw.c hpgl_draw_current_path(): fixed to preserve the current path
between drawing the edge and the fill of characters.
-pgdraw.c hpgl_set_drawing_color(): gs calls to set fill adjustment,
source and texture transparency.
-pgdraw.c hpgl_set_pcl_to_plu_ctm(): left and bottom parameters were
being treated as fractions instead of percentages.
-pgdraw.c cleanup.
-pgcolor.c hpgl_PP() - removed and moved in pglfill.c (see above).
-pcstate.h changed bool grid_centered to float grid_adjust.
-pcsfont.c - proper round of quarter dots -> quarter points.  Yes this
did cause a bug in the fts.  A tenth of a point difference caused the
wrong font to be selected.  The rounding fixes the problem.
-pcprint.c - pcl_purge_pattern_cache() now clears pcl pattern
references.
-pcprint.c - obsolete lvalue pcls->pattern_set removed.
-pcprint.c pcl_store_user_defined_patterns() - now purges the pattern
cache if the user downloads a pattern with the same id as the
currently cached pattern.
-pclfont.c - removed "Loaded" printf to cut down on stdout messages,
the font loading code now reports any font *not* found in the internal
table of resident fonts so this message should be unnecessary.
-pcfsel.c - fixed debug message to divide "height_4ths" by 4 to print
the point size.
-pcdraw.c - added new function to clear pattern references.
-pcdraw.c - gs calls to set source, texture, and fill adjust.
-pccprint.c - pccprint_do_copy() doesn't need to evaluate boolean
adjust since this is now maintained directly as floats.
-pccprint.c - pcl_pixel_placement() grid adjust (not grid centered)
now float.
-pcl.mak - new include file dependencies added.

See Version 0.38 notes for missing functionality.

Version 0.39 (11/25/97)

This release simply changes the default pcl5 device to x11mono.
Currently the pcl code does not completely support devices with more
than 1 bit per pixel, previously the default device was X11 which is
an 8 bit per pixel color device.  The only necessary change was
reordering the device files in the pcl5 makefile

Version 0.38 (11/20/97)
=======================

(LPD)
	- Adds PCL XL output to the Unix makefile.  Note that this required
a minor, backward-compatible change in common/ugcc_top.mak and
common/watc_top.mak.  (pcl_ugcc.mak)
	- Adds fonts/ to the list of directories to search for fonts.
(pcmain.c)

The following PCL5e commands and facilities are parsed correctly, but their
functionality is not implemented yet:
	- Select default font (ESC (|) 3 @).  (pcfont.c)
	- Conditional pattern rotation (ESC * p # R).  (pcprint.c)
	- Assign font id to copy of current font (ESC * c 6 F).  (pcsfont.c)
	- Continuation blocks for character data (for ESC ( s # W).
(pcsfont.c)
	- Variable text path (ESC & c # T).  (pctext.c)

The following HP-GL/2 commands and facilities are still unimplemented:
	- Double-byte characters (LM command is implemented but has no
	effect).  

(HAS) Fixes bug in design window origin for Intellifonts.  (pcifont.c)

Version 0.37 (11/6/97)
=====================

Fixes problem in updated LJ5 FTS and integrates complete set of
resident fonts except lineprinter.

The only new functionality in this release is label origin mode that
allows positioning of the hpgl/2 character origin at the current pcl
cursor position, (pglabel.c) and the new fonts.

(LPD) added documentation for common makefiles and added gdevbbox and
bbox.dev dependencies.

(HAS) Changes associated with bug LJ5 FTS fixes include:

- Pattern phases/rotation not correct.
pcdraw.c:pcl_set_drawing_color_rotation() pattern phase set here,
added device space origin parameter, removed reflection code.  Added
function pcdraw.c:pcl_set_drawing_color() initializes rotation and
pattern origin.  Updated prototypes for changes are in pcdraw.h.
pcprint.c:pcl_set_pattern_reference_point() updated to only set state
values that affect how the reference point will be set.
- pclfont.c:pcl_lood_built_in_fonts() restructured to support new
resident fonts.
- pcsfont.c:pcl_font_header() interpreted bitmap font height
incorrectly, using 1/4 points instead of 1/4 dots.
- pcltext.c:pcl_show_chars() restructure to properly clip/drop text at
the right margin.  This will be a major performance bottleneck since
the code now renders one character at a time.  This will be addressed
when the FTS tests are correct.
- pcltext.c:pcl_text() removed device space clipping code.
- pcltext.c:pcl_text() explicit hmi was ignored for proportional fonts.
- pccursor.c:move_down() half line was not working because function
was using global vmi instead of passed in parameter.
- pgconfig.c:hpgl_picture_frame_coords() picture frame coordinates not
specified correctly.
- pgdraw.c:hpgl_set_picture_frame_scaline() new function added to
simplify hpgl_set_ctm().
- pgdraw.c: several functions were ignoring GS return values.  This is
now fixed.
- pgdraw.c:hpgl_set_drawing_color() updated to handle pcl drawing
attributes for rendering characters.
- pgdraw.c and pgvector.c: hpgl_plot_function_t is not "fungible" with
bool.  This has been straightened out.
- pgframe.c - added state variable to indicate if plot mode has been set.
- pglfill.c: hpgl_PU() and hpgl_WU() - redone.
- pcsymbol.c:pcl_define_symbol_set() symbol codes not byte swapped.

Known problems:

-The left margin is set to the left of the right margin.  PCLTRM 5-15
says the left margin should not be reset.  anomaly.  fts 111.
Height of bars is incorrect.  We use a scalable courier font.
anomaly.  fts 140.
-Pattern reference point is not the same as the 6mp.  We are doing what
the manual says (PCLTRM 13-16), using a default reference point of 0,
0, the 6mp does not seem to do the same.  anomaly.  fts 102, 125, 174,
194. 225, 1072, 1074, 1092, 1094, 2276.
-Space character is still marginally different this results in an
accumulation error on the right margin.  Bug.  fts 260.
-Wrong or missing glyphs in character set.  Bug.  fts 260, 261, 263,
264, 270, 271, 274, 1810, 1820, 2063, 1150, 2330.
-Extra space before string.  Bug.  fts 311.
-Font selection incorrect.  bug.  fts 291, 341, 390, 401, 2272, 1612,
1700, 2300.
-Wrong baseline for string.  intellifont scalar not properly
interpreting measuring baseline for font.  fts 342, 351, 360. 410,
411.
-Dashed lines not offset wrt anchor corner dashed lines are not offset
for gl/2 fills.  fts 1132, 1133.
-Character fill mode not working for stick fonts. I believe this is an
HP bug since vectors should be filled with using SV and not FT since
stick fonts are actually vector data.  anomaly.  fts 1221.
-The glyph for "t" in a dounloaded intellifont font is corrupt.  The
number of auxillary point in the font is set to 0xffff.  I have no
documentation that says what to do if this is the case.  Bug.  fts
1800.
-GL/2 transparency problem. Bug.  fts 1541, 1542, 1563. 1810 page 3.
-GL/2 anchor corner.  Bug fts 1611, 1620, 1621, 1630.
-wrong font selected - 1612, 1700, 2300.
-black boxes on panel border are too large - 1613.
-one of the scaling modes is not correct 1634, 1635.
-gl/2 vector fill not working properly with character data and gl/2
-vector fills not properly implemented with fill polygon mode.  we will
probably need to rewrite the filling algorithms to handle both
-odd-even and non-zero winding fills.  Bug.  fts - 1810
-stray line probably due to clipping difference Bug.  1810 page 5.
-extra raster data Bug.  1833, 1836
-wrong pattern - pattern state not properly updated.  Bug.  fts - 2040,
2041, 2042
-missing line.  Bug.  fts 2120, 2122, 2125.
-missing line drawing characters from character set.  Bug. fts 2240.
-missing overlay - hpgl/2 in pcl5 macro not properly implemented.  Bug
fts 2290, 2291.
-downloaded font not rendered Bug fts 2321.
-not selecting correct secondary font.  Bug fts 2322
-stray lines on bezier curver Bug fts 2342, 2352
-raster operation incorrect and pixel placement not implemented.  Bug
fts 2380-2412.
-text parsing method - double byte characters not done.  Bug fts
2420-2422.

Version 0.36 (9/4/97)
=====================

Fixes nearly all the remaining FTS problems.  Note that getting the full
benefit of the fixes requires pl version 1.16 or later (for #12 for frames
1150 and 1151) and gs version 5.04 or later (for pattern memory management).

Here is the current bug list: bugs believed fixed are marked with a *; bugs
deliberately (or necessarily) not fixed at this time are marked with (*).

*1. default font used for captions in all fts test is supposed to be
univers typeface.  We do not have a univers typeface in our font repotoire. 
*2. empty.
*3. empty.
*4. page rotation wrong - 70-78, 90-98, 580-585, 2130.
*5. improper clipping - 1470.
*6. spacing or font selection - 284, 291-294, 300, 301, 1710, 2240, 2241, 2242
  (lots more).
(*)7. right margin clipping - 121, 124.  (same problem as #8, q.v.)
(*)8. hmi problem - 141.  (requires fonts with the same metrics as H-P's
  fonts, including same space width)
*9. vmi problem (extra pages) - 150-159, 2130, 2151, 2270.
(*)10. missing crosshatch fill - 174, 184, 194, 204, 214, 224.  (only
  missing on display: printer is OK, so we won't bother tracking it down now)
*11. horizontal column position - 206, 216, 226.
(*)12. missing/incorrect glyphs - 260, 261, 270, 271, 420, 421, 1151,
  1300-1470, 2330.  (remaining missing glyphs, and incorrect Math-8 text in
  1150, require expanded fonts)
*13. symbol set selection side effect - 274, 2050, 2130, 2261.
*14. pitch mode - 320
*15. extra underlines - 412-415
*16. raster y offset - 600, 602, 2250
*17. extra pages in raster mode - 600-
*18. extra raster row - 618
*19. unmapped chars print as boxes - 622 & many others.
*20. missing raster pages - 618-641
*21. pattern/raster interaction - 661-663, 1851.
*22. pattern selection - 665
*23. transparency / bounding box of outline glyph - 670, 682, 683, 780, 790.
*24. pattern rotation text direction interaction - 742, 2011, 2013
*25. missing macro line 791.
*26. missing several pages, blows up when starting gl/2 characters - 820, 960,
  1480, 1810, 2350.
*27. out of phase dashed line 1062, 1082, 1116, 1132.
*28. misplaced line - probably position error after hpgl/2 line fill - 1094
*29. wrong fill - 1113.
*30. spacing/proportional font problem - 1161.
*31. font height - 1181.
*32. stroke weight - 1201.
*33. outline fonts not filled or edged - 1220-1223.
*34. bitmap font at non-orthogonal skew - 1241.
*35. variable text path - 1270-1274.
*36. extra space - 1280-1282.
*37. missing wedges 1472.
*38. raster graphics restoring X=0 position 1840, 1841
*39. extra black rectangles 1860, 1861-1890.
*40. captions misplaced 2013, 2020
*41. text & bitmap transparency 2020, 2021
*42. hpgl/2 pcl user defined patterns unsupported - 2030-2042, 2290, 2291,
  1486.
*43. test pages rotated 180 degrees. 2221-
*44. si enhanced 2253
*45. bezier 2340-2330.
*46. caption font placement (obvious in 960, 965)
*47. opaque raster doesn't fill out specified width with white - 820, 821, 822,
  2020, 2021
48. anchor corner still slightly off - 1470, 1471.
*49. fill angle and spacing (possibly #48) - 1482, 1483, 1484, 1487
*50. Triangular end instead of round - 1490.
*51. Line attribute state not correct - 1493, 1502, 1504, 1810.
*52. out of phase dashed line - 1507.
*53. giant stick font characters - 1513, 1810 note: problem might obscure
  other problems in this test.
54. pen color wrong - 1512.
*55. left offset clipped incorrectly - 1761.

(LPD) Fixes bugs:
	- Symbol sets weren't supported in GL/2.  (pglabel.c)
	- The Windows Symbol and Wingdings fonts were identified as bound
(indexed starting at 0), whereas they are actually TrueType fonts with all
characters in the private range (0xf000 - 0xf0ff).  This requires a special
hack in the symbol mappers.  (pclfont.c, pctext.c, pglabel.c)
	- The stick font could be selected even if it didn't have the
required character complement.  (pglabel.c)
	- AD and SD caused unnecessary font selection even if parameter
values didn't change.  (performance bug only)  (pgchar.c)
	- Opaque characters weren't supported in PCL5.  Since the only files
that use this feature (?) are contrived tests, we didn't bother making the
implementation efficient.  Fixes #23 and #41.  (pctext.c)
	- Raster images weren't padded to the specified width.  Fixes #47.
(rtraster.c)
	- Pattern cache entries for temporary raster patterns weren't
removed at the end of the job (ESC E or UEL).  (pcstate.h, pcdraw.c,
pcprint.c)
	- Downloaded user-defined pattern format 20 (resolution-specified
pattern, undocumented) wasn't recognized.  (pcprint.c)
	- The MC command wasn't recognized unless color capability was
included.  (pgcolor.c, pglfill.c)

(LPD)
	- Changes the stick/arc font to use Unicode encoding.  This is
required in order for symbol sets to work with this font.  (pgfdata.h,
pgfdata.c, pgfont.c, pglabel.c)
	- Implements parsing, but not functionality, for the HP-GL/2 LM
command.  Note that the Genoa LJ4 suite doesn't use this command.
(pgmand.h, pgstate.h, pgchar.c, pgconfig.c, pglabel.c, pglfill.c)
	- Adds tracing to font selection algorithm, with -Z=.  (pcfsel.c)

(HAS) ChangeLog: (fixes #49)

	* pgconfig.c (hpgl_picture_frame_coords): code cleanup:  factored
	out rounding of coordinates form hpgl_IP and hpgl_IR.  Now the
	picture frame function return a rectangle of integers.

	* pgconfig.c (hpgl_IR): reworked code to move relative to
        current PCL picture frame window and not current P1 and P2 position.

	* pgpoly.c (hpgl_wedge): got rid of unnecessary polygon ctm code.

	* pglfill.c (hpgl_SV): redefined SV to draw the current path when
	SV is called.  This is not quite right (see comments in the code)
	but it works for the fts.

	* pgdraw.c (hpgl_set_drawing_color): set up to default to solid
 	black for raster fill types that have undefined dictionary
 	entries.  Folded functions: hpgl_map_fill_type() and
        hpgl_map_id() into on case statement.  Fixed bug introduced by
        passing the boolean to set the current ctm to
        hpgl_add_point_to_path() in hpgl vector fills.  

	* pgconfig.c (hpgl_picture_frame_coords): corrected default
	picture frame to return PU not user units.

Version 0.35 (8/15/97)
======================

Fixes more FTS problems.  Note that getting the full benefit of the fixes
requires pl version 1.15 or later (for #12 and #19) and graphics library
version 5.10 or later (for #55).

(LPD) Fixes bugs:
	- GL/2 characters were scaled to user units if neither SI nor SR was
in effect.  Fixes #53.  (pgdraw.h, pgdraw.c, pglabel.c)
	- A forward declaration was lacking for
hpgl_compute_user_units_to_plu_ctm.  It turned out we needed it to be
exported anyway.  (pgdraw.h, pgdraw.c)
	- The arc font wasn't actually proportionally spaced.  Fixes #30.
(pgfdata.h, pgfont.h, pgfdata.c, pgfont.c)
	- Fixed-spacing PCL fonts did some extra work if HMI wasn't set
explicitly.  (This may not have had any effect on the output.)  (pctext.c)
	- Floating-point arguments to PCL commands were parsed as garbage!
It's amazing that this wasn't detected before.  Fixes missing lines in FTS
frames 281 and 291, and maybe some other bits of #6.  (pcparse.c)
	- The pitch wasn't set properly for Intellifonts.  Fixes #6 for
frame 284.  (pcsfont.c)
	- The offsets of Intellifont outline auxiliary points were
interpreted as unsigned rather than signed, causing some characters to be
distorted.  (pcifont.c)
	- The decoding of curves and lines in Intellifont outlines was
interchanged, causing some characters to be distorted.  (pcifont.c)
	- The computation of GL/2 label origin didn't distinguish correctly
between font height and cell height, causing labels to be misplaced
vertically for some LO values.  Fixes #46.  (pglabel.c)
	- The limited rotation rule for bitmap fonts wasn't implemented.
Fixes #34.  (pglabel.c)
	- In PCL text, undefined characters printed as boxes rather than as
spaces.  Fixes #19, but requires a pl library fix introduced in version
1.15.  (pctext.c)
	- A BS followed by an undefined character caused the interpreter to
exit with an error.  (pctext.c)

We aren't sure what combination of the above did it, but #6 and #13 are
fixed, at least for the specific frames listed under them.

#55 was caused by incorrect margin settings in the graphics library's
LaserJet drivers.  The fix for this will be in library version 5.10.

The fixable part of #12 was caused by incorrect symbol set information in
the pl library.  The fix is in pl version 1.15.

(LPD) Implements the following unimplemented features:
	- Intellifont compound characters.  Fixes #13 for frame 274.
(pcsfont.c, pcifont.c)

(LPD)
	- Collapses the two switches for LO into one.  (pglabel.c)
	- Removes the current_render_mode variable from the GL/2 state.
(pgdraw.h, pgstate.h, pgdraw.c, pginit.c, pglabel.c)
	- Changes the bookkeeping for GL/2 character scaling mode from two
Booleans to an enum, which reflects the underlying logic better.
(pgstate.h, pgchar.c, pglabel.c)
	- Adds debugging tracing for the Intellifont outline interpreter.
(pcifont.c)
	- Adds fake Univers Condensed fonts.  (pcfont.c)
	- Makes GL/2 text use show rather than charpath/fill in the most
common cases.  This enables use of the library's character cache, which is
required to obtain reasonable performance.  (pglabel.c)
	- Splits off the initial font loading code into a separate file,
since it's not functionally tied to the font-related PCL commands.
(pcfont.c, pclfont.c)

(HAS) ChangeLog:

	* pgdraw.c (hpgl_set_drawing_color): call vector routines for
	appropriate character fill cases.  Fixes #33.  There is still a
	line width and edging problem for 1220 - 1223 but that is a
	different bug.

	* pcdraw.h (pcl_set_drawing_color): modified to always pass the
	pcl state pattern dictionary to pcl_set_drawing_color().  (see
	next entry)

	* pgdraw.c (hpgl_set_drawing_color): modified to accept a
	pattern dictionary as a parameter.

	* pcprint.c (pcl_user_defined_pattern): split out into two
	routines, one to parse the data and the other to store the
	pattern.  The latter is used by hpgl/2 RF to convert RF to user
	defined pcl patterns.  Also new file pcprint.h that exports this.

	* pgdraw.c (hpgl_add_point_to_path): added parameter to optionally
	set the ctm (i.e. clients can now provide their own ctm by setting
	it in the state and setting the parameter to false).  Changes to
	all pg files to support the change.

	* pglfill.c (hpgl_RF): rewrriten to use dictionaries and pcl user
 	defined pattern code.  ARGH - There is a serious problem in this
 	code.  Currently, temporary pattern data is allocated in static
 	variables because dynamically allocating the buffer seems to
 	unmask a bug in the parser (??).  When allocated dynamically the
 	data buffer is stepped on while calling hpgl_arg_c_int().  It seems
 	to be near a longjmp().  I spent some time looking at this
 	and decided to put the temporary hack in and continue on.  We have
	"reasonable" output now for tests listed in #42.  Pcl user
	defined output is correct and hpgl/2 user defined output is 
	slightly different.  design change also affects: pginit.c pgstate.h.

	* pgdraw.c (pcl_angle): changed pcl_angle to range 0..3

	* pgconfig.c (hpgl_RO): When maintaining the pen in device space
	the code was not checking that the current mode was absolute vs
	relative.  part of #42 (2031 and 2041).

	* pcdraw.h (pcl_set_drawing_color): uses pcls->patterns as default
	for pcl code.  hpgl/2 will use a different pattern.  part of #42
	PETER: you may want to do this differently.  This was the minimal
	pcl code change to support the hpgl/2 fill implementation.

	* pcdraw.c (pcl_set_drawing_color_rotation): new parameter -
	pointer to a dictionary containing pattern data to be used for the
	cases of pcl and hpgl user defined pattern.  part of #42

	* pgdraw.c (hpgl_set_drawing_color): set up pcl user defined fill
	types in pgdraw.c.  Fixes part of #42.
	(hpgl_set_drawing_color): removed return when filling vector
	lines.  It turns out that screen (filled) vectors can be used as
	fills.  Fills of fills.  Fixes part of #42 (FTS - 2042)

	* pgdraw.c (hpgl_set_drawing_color): moved setting of source
	transparency from hpgl_TR() -- silly mistake.

Version 0.34 (8/9/97)
=====================

Fixes more FTS problems.

(LPD) Fixes bugs:
	- DV didn't interact properly with LO.  Mostly fixes #35.  (pglabel.c)
	- Line feeds didn't work properly with vertical text paths.
Finishes fixing #35.  (pglabel.c)
	- SO within a LB string selected a font with an invalid index,
causing unpredictable problems.  (pglabel.c)
	- GL/2 bitmap fonts with proportional spacing weren't scaled
correctly.  (pglabel.c)
	- Downloaded Intellifonts were filled incorrectly because the fill
rule was winding-number rather than even-odd.  (pgdraw.c)
	- In GL/2 text, the SP code did nothing if no space character was
defined in the current font, rather than treating it as a control character.
Together with the fix for proportionally spaced bitmaps, fixes #36.
(pglabel.c)
	- The comment on the pen structure in pgstate.h was wrong: there is
only a single pen width, not a separate width for each pen.  (pgstate.h)
	- CF edging wasn't disabled when SB1 was in effect.  (pgdraw.c)

(LPD) Implements the following unimplemented PCL features:
	- Compressed bitmap fonts (for ESC ( s # S).  (pcsfont.c)

(HAS) ChangeLog (bug fixes):

	* pgpoly.c (hpgl_rectangle): changed order of segment drawing in
	rectangle code to fix the out of phase dashed lines #27 and #52.

	* pgdraw.c (hpgl_map_pen_color): map an hpgl color to a pcl
        foreground color.

	* pglfill.c (hpgl_SP): needed to stroke current path when
	selecting pen.
	(hpgl_TR): added call to set source transparency.

	* pgdraw.c (hpgl_set_graphics_line_attribute_state): HP sets line
	joins caps and joins to default values for line with pen width <=
	.35.  Fixes #50 and #51.

	* pglfill.c (hpgl_LA): upper limit for parsing the cap value was
 	incorrectly specified as > 3.  It is now > 4.

Version 0.33 (7/31/97)
======================

Fixes more FTS problems.

(LPD) Fixes bugs:
	- Patterns sometimes weren't created properly, because the CTM
wasn't set before creating them.  (pcrect.c)
	- The right margin wasn't initialized properly, causing anomalies if
the PCL file didn't explicitly set the page size or orientation.  (pcdraw.c)
	- Diagonal patterns sometimes came out mirrored, because of errors
in handling coordinate transformations.  Fixes #24 for frame 742.
(pcdraw.c)
	- GL/2 labels didn't set up the CTM explicitly, possibly causing
text to be misplaced after drawing in a rotated coordinate system.
(pglabel.c)
	- The default GL/2 picture frame height was the current PCL text
length, not the default PCL text length for the current page orientation.
Fixing this required a structural change in the handling of margins.  Fixes
#40.  (pcdraw.h, pcstate.h, pcdraw.c, pcpage.c, pctext.c, pcursor.c,
pgframe.c, pginit.c, rtcursor.c)
	- Transitions from HP-GL/2 to PCL didn't reset the bookkeeping for
underlining, which could produce stray underlines.  Fixes #15.  (pgframe.c,
rtmisc.c)
	- All GL/2 fonts were scaled by height, instead of scaling
proportional fonts by height and fixed-width fonts by pitch.  Fixes #31.
(pcfont.c, pglabel.c)
	- The stick font didn't have the correct pitch, making it scale
incorrectly.  (pglabel.c)
	- The computation of stroke width from weight didn't match H-P's
closely enough.  Fixes #32.  (pglabel.c)
	- The stick font could be selected (incorrectly) even if a
non-upright posture was requested.  Fixes a problem in FTS frame 1191.
(pglabel.c)
	- CF with only a single parameter reset the character edge pen to 0,
rather than leaving it alone.  (pgchar.c)
	- Characters were always filled with black, rather than being filled
and/or edged according to the character fill mode.  ****** IN PROGRESS
****** Fixes #33 (when completed: only fixes frames 1220 and 1221 so far).
(pgdraw.c)
	- The table of RF patterns wasn't initialized to 0, causing memory
access errors.  (pginit.h, pginit.c, pglfill.c)
	- DF didn't clear the RF pattern table.  (pgconfig.c)
	- In a debugging configuration, the GL/2 state was cleared at times
other than printer reset, smashing the RF pattern table.  (pginit.c)
	- Printer reset cleared the polygon buffer without freeing its
contents.  (pginit.c)
	- GL/2 extra space for text was used incorrectly to compute
displacements.  Fixes #36 for frame 1281 and the vertical aspect of frame
1282.  (pglabel.c)
	- GL/2 DV (variable text path) didn't correctly affect the
extra-space computation.  (pgstate.h, pglabel.c)

Sets the miter limit for the stick font to bevel angles less than 45
degrees, to avoid anomalies on sharp points like those in a 'w'.  (pgfont.c)

Creates a bogus arc font by condensing the stick font by 25% in X.
Eventually we will add proportional spacing.  (pgstate.h, pgfont.c,
pginit.c, pglabel.c)

Some other fix apparently fixed #43.

(HAS) Fixes bugs:

	* pgdraw.c (hpgl_set_clipping_region): fixed missing wedges in #37
 	(1472), by properly defining the clipping region.  Clipping
        code rewritten.

	* pgdraw.c (hpgl_set_drawing_color()): uses pcl routine for
        rotation.

	* pgpoly.c (hpgl_polyfill()): #28 fix.  hpgl_polyfill() was corrupting
	the pen position.

	* pgstate.h, pgconfig.c pgdraw.c (hpgl_IW()) - added soft clip window
	state values part of #37 (1472).

	* pgstate.h - screen shading value changed from float to int.

Version 0.32 (7/28/97)
======================

Fixes many more problems uncovered by the Genoa FTS.

(LPD) Fixes bugs:
	- Macros could only be nested once rather than twice (TRM 12-9).
Fixes #25.  (pcmacros.c)
	- ESC Z didn't terminate Display Functions mode correctly: caused
FTS frames 860 and 861 not to be printed.  (pcparse.c)
	- Images sometimes didn't image at all, because they didn't fully
set the drawing color by calling gx_set_dev_color: caused bitmap images to
disappear from FTS 820-822.  (rtraster.c)
	- The text length command doesn't set the number of lines in the
text area: it sets the length of the text area to a given number of lines
times the current VMI, unaffected by subsequent VMI or font changes.  (This
is described very badly on TRM 5-20 and 24-4.)  Fixes #9.  (pcstate.h,
pcdraw.c, pcpage.c, pctext.c, pcursor.c, pgframe.c, pginit.c)
	- Text clipping does not occur at the left margin, and only occurs
at the right margin if the initial cursor position is to the left of the
right margin.  (This is described very badly on TRM 5-13.)  Similarly,
end-of-line wrapping occurs only when *crossing* the right margin.  (This is
described badly on TRM 24-13.)  Fixing this requires keeping track of
whether the cursor has been moved since the last text character:
fortunately, the underline tracking machinery already does almost exactly
this.  Fixes #11.  (pcfont.h, pcstate.h, pcdraw.c, pctext.c)
	- The Set Pitch Mode command, which is documented (using the word
loosely) only on p. A-7 of the PCL5 Comparison Guide, wasn't implemented;
also, fixed-width scalable fonts were scaled according to height and not
pitch.  Fixes #14.  (pcfont.c, pctext.c)
	- The Raster Y Position command didn't work when the image was a
mask.  Fixes #16 for frames 600 and 602, #17, and #44.  Either this change
or the next one also fixes #20.  (rtraster.c)
	- The Start Raster Graphics commands didn't record whether they used
the CAP or the default margin, which could cause improper placement if
raster graphics mode was entered implicitly.  Fixes #16 for 2250, also #38.
(pcstate.h, rtraster.h, rtraster.c)
	- The Raster Y Position command didn't properly reset the
bookkeeping for row width, causing confusion if it was followed by
zero-width rows.  Fixes #18.  (rtraster.c)
	- If the argument of Select Pattern was the same as the current
pattern type, the Select Pattern command didn't actually select the pattern.
Fixes #21 and #22.  (pcprint.c)
	- Selecting a non-existent user-defined pattern substituted black,
rather than not filling the region at all.  Fixes #39.  (pcdraw.c)
	- The shading level for Fill Type 10 was inconsistently represented
as a fraction (0..1) or a percentage (0..100): it's now always a percentage.
Fixes #29.  (pgstate.h, pgdraw.c, pglfill.c)
	- The Set Pattern Reference Point command didn't actually affect
whether patterns were rotated with the print direction.  Fixes #24 for
frames 2011 and 2013.  (pcdraw.h, pcdraw.c)

Changes the preloaded fonts so that Arial claims to be Univers and Times
claims to be CG Times.  Fixes #1.  (pcfont.c)

Tidies up the comment in hpgl_select_font_by_id: Henry's fix in 0.31 is the
correct one, and fixes #26.  (pgchar.c)

Version 0.31 (7/24/97)
======================

This fixes many minor GL/2 problems uncovered by the Genoa FTS.

(HAS) ChangeLog:

	* pgvector.c (hpgl_arc_3_point): most of code put in a new
	function (hpgl_add_arc_3point_to_path()) that is also used by
	hpgl_wedge.
	(hpgl_bezier): fixed typo that set x pos and y pos to y pos.
	Fixes #45.
	(hpgl_CI): rewritten to not call other commands.

	* pgpoly.c (hpgl_rectangle): removed direct calling of hpgl/2
	commands. 
	(hpgl_wedge): removed direct calling of hpgl/2 commands. 

	* pglfill.c (hpgl_RF): new code to store pixels.

	* pglabel.c (hpgl_LB): restore only the X position depending on
	DV/LO combo 23-78.  Not sure if this is correct (as noted in code).

	* pginit.c (hpgl_default_coordinate_system): added more
	initialization here - scaling, position etc.
	(hpgl_clear_state): gl/2 state now initialized with 0xee if in
	DEBUG mode.

	* pgdraw.c (hpgl_polyfill_bbox): commented out code to add pen
	width which disturbs the current anchor corner implementation.
	Fixes #5.
	(hpgl_draw_vector_absolute): removed calling of hpgl/2 commands.
	(hpgl_polyfill): removed saving and restoring of pen state.
	(hpgl_map_fill_type): redone to handle all render modes correctly.
	(hpgl_map_id_type): redone to handle all render modes correctly.
	(hpgl_draw_line): removed.
	(hpgl_draw_dot): removed.

	* pcpage.c (pcl_page_orientation): reset hpgl/2 page parameters.
	Fixes #4.

	* pgdraw.c (hpgl_add_bezier_to_path): updated to handle drawing
	bezier with pen up.  part of fixes #45.
	(hpgl_add_arc_3point_to_path): new function used by AT and WG.  To
	support WG no longer calling AT.

	* pgconfig.c (hpgl_RO): changed to not reset the clipping window
	IW.  fixes missing wedges in buglist.pcl #37

	* pgchar.c (hpgl_select_font_by_id): hack to prevent code from
	crashing while working on other things.

Version 0.30 (7/5/97)
=====================

This greatly advances the implementation of GL/2 text.  Still unimplemented:
	- CF.
	- "Correct" (i.e. crippled) implementation of DI/DR with SB1.
	- Interaction of LO and DV.
	- Text when scaling is on (coordinates & sizes are different).
	- LO21.

(LPD) Fixes bugs:
	- Isotropic and anisotropic scaling with a non-zero Xmin or Ymin
didn't translate the origin.  (pgconfig.c)
	- The clipping region was set improperly (using scaled rather than
unscaled plotter coordinates) when scaling was in effect.  (pgdraw.c)
	- Some makefile rules were out of date (as usual).  (pcl.mak,
pcl_top.mak)

(LPD)
	- Starts to implement double-byte text for PCL.  (pcstate.h,
pcfont.c, pctext.c)
	- Converts the GL/2 stick and arc fonts to real fonts that work with
the library.  (pgfont.h, pgchar.c, pgfont.c, pginit.c, pglabel.c)
	- Enables use of other fonts (besides the stick/arc font) with GL/2.
(pgdraw.c, pglabel.c)
	- Implements GL/2 text transformations: DI, DR, SI, SL, SR.
(pglabel.c)
	- Mostly implements the GL/2 DV (text path) command.  (pgstate.h,
pgchar.c, pglabel.c)

Version 0.29 (6/30/97)
======================

More bug fixes, mostly in the GL/2 code.

(LPD) Fixes bugs:
	- The top-level makefile didn't include the .exe extension in
some places.  (pcl_top.mak)
	- The parameter list of hpgl_stick_append_char wasn't
consistent with its prototype.  (pgfont.c)
	- Some places used NULL, which isn't always defined by all
compilers, instead of 0.  (pcdraw.c, pcfsel.c)

Updates a file to track changes in the definition of the polygon
buffer.  (rtmisc.c)

Fri Jun 27 20:45:34 1997  Henry Stiles  <henrys@meerkat.dimensional.com>

	* pcparse.c (pcl_process): modified to not look ahead for plain
	text while in macro mode.

	* pcmacros.c (pcl_execute_macro): updated to decrement pointer to
	buffer stream before passing the pointer to pcl process.

	* rtmisc.c (rtl_enter_pcl_mode): updated so that pcl properly
	inherits hpgl/2 position for <ESC>%1A.

	* pcursor.c (pcl_do_FF): updated FF to place cap at top margin +
	75% of vmi.

	* pcpage.c (pcl_perforation_skip): updated to reset text length
	and top margin when perforation state modified as per PCLTRM.

	* pgdraw.c (hpgl_set_plu_to_device_ctm): proper translations for
	rotation. 

	* pgdraw.c (hpgl_polyfill_bbox): temporarily set the origin of the
	bounding box to the minimum of bbox's origin and anchor corner.
	FTS 1472 sets AC ahead of the bbox's origin.  This will have to be
	revisited.

	* pgconfig.c (hpgl_BP): added breakpoint mneumonic for debugging
	systems.

	* pglfill.c (hpgl_PW): dirty details of HPGL/2 pen widths.

	* pgdraw.c (hpgl_polyfill): added save and restore of pen state.
	(hpgl_polyfill): now uses straight black fill if the current
	spacing is smaller than the current line width.  

	* pgvector.c (hpgl_RT): not updated to use hpgl_draw_arc_along
	with other arc functions.

	* pgdraw.c (hpgl_add_point_to_path): pgls->g.first_point was being
	set to the point from the current state position instead of the
	point being passed to hpgl_add_point_to_path().  This fixes most
	of the missing joins in the FTS tests.

	* pglfill.c (hpgl_LT): added hpgl_draw_current_path() to LT.
	Oddly the HP code creates a new subpath even if the LT does not
	change the current state.  This fixes most of the line cap
	problems in the fts as the path was not being stroked when the
	attibutes changed.


Version 0.28 (6/20/97)
======================

This is just a checkpoint for copying onto LPD's laptop.

(LPD) Fixes bugs:
	- The stick font didn't reset its parameters to the requested ones.
(pgstate.h, pglabel.c)
	- Proportional spacing with the stick font didn't work.  (pgstate.h,
pglabel.c)
	- The character cell width wasn't computed correctly.  (pglabel.c)
	- The LB command set the carriage return point at the beginning,
even though it shouldn't.  (pglabel.c)
	- The GL/2 commands that should set the carriage return point
didn't.  (pgchar.c, pgvector.c)

(LPD) Other changes:
	- Simplifies PE by using the new add_point_to_path interface.
(pgvector.c)
	- Replaces the stick font tables and algorithms with ones provided
by a third-party supplier that are much more compact.  (pgfont.h, pgfont.c,
pglabel.c)
	- Adds an explicit move/draw parameter to hpgl_add_arc_to_path, to
allow it to be used for character drawing.  (pgdraw.h, pgdraw.c)
	- Removes some unnecessary coordinate transformations in
hpgl_set_ctm.  (pgdraw.c)

Version 0.27 (6/9/97)
=====================

More bug fixes.  Vector fills and text work a lot better.

FTS problems:
    0060:
	.1 Rev portrait & rev landscape text clipped in landscape orientations
	.2 GL/2 filled wedges missing (all 4)
	.3 GL/2 stuff is displaced in landscape orientations
    1062(1060):
	Dashed line offset is not correct so most of the graphics that use
	  dashing dash out of phase.
CET problems:
	- The width of Intellifont characters is wrong.  (CET 14_01)
	- Positioning of characters is off -- requires "real" fonts.
	- Text wrap happens too far to the right.
	- Tabs don't work quite right.
	- Text length doesn't work.  (CET 16_04)
	- Other major anomalies: 16_10, 16_11
Unimplemented features (PCL):
	- Font Control 6 (copy font & assign ID) (CET 14_04)
	- Continuation blocks for downloaded characters.
	- User-defined line type (99).

(LPD) Fixes bugs:
	- The README file had gotten out of date.  (README)
	- Vector fills generated a NaN with angles that were multiples of 90
degrees, and didn't work properly if the sine and cosine of the angle had
different signs.  (pgdraw.c)
	- FT with hatching didn't properly default the line spacing to 1% of
the P1/P2 diagonal.  (pgstate.h, pglfill.c)
	- FT didn't use the previous parameter values as the defaults.
(pgstate.h, pglfill.c)
	- FT alone wasn't equivalent to FT1.  (pglfill.c)
	- Dashed lines with an odd number of gaps didn't work correctly.
(pglfill.c)
	- Dots weren't drawn for non-adaptive line types.  (pgdraw.c)
	- The weight of stick/arc characters wasn't correct.  (pglabel.c)
	- Characters weren't scaled or spaced properly.  (pgdraw.c,
pglabel.c)
	- Some state variables had been added to pgstate.h in an
inappropriate place.  (pgstate.h)
	- A GL string with a SI or SO caused an infinite loop.  (pglabel.c)

(LPD) Implements missing functions:
	- Scaling modes other than 0 (anisotropic).  (pgdraw.c)

(LPD) Other changes:
	- Renames hpgl_scaling_type_t as hpgl_scaling_params_t to reflect
its function better.  (pgstate.h, pgconfig.c)
	- Consolidates the GL pen parameters into a struct.  (pgstate.h,
pgdraw.c, pglfill.c)
	- Makes the functionality of PA/PD/PR/PU available as a procedure
(hpgl_add_point_to_path).  (pgdraw.h, pgstate.h, pgdraw.c, pgvector.c)

Version 0.26 (6/3/97)
=====================

More bug fixes, and the first implementation of vector fills.

(LPD) Fixes bugs:
	- gxpath.h was included twice, causing compilation errors.  (This
file should really be protected against double inclusion.)  (pcdraw.c,
pgdraw.c)

(HAS)
	* rtmisc.c (rtl_enter_pcl_mode): releases the polygon buffer.

	* pgvector.c (hpgl_draw_arc): routine to draw the path if we are
	not in polygon mode.  
	(hpgl_AR): added draw arc routine
	(hpgl_AT): ""
	(hpgl_AA): ""
	(hpgl_CI): new implementation.

	* pgstate.h: new data structures and pulled in gzpath.h
	interfaces.  Also new definitions for vector fills and saved line
	types.

	* pgpoly.c (hpgl_wedge): Fixed incorrect calculation of vector
	endpoints.
	(hpgl_EA): changed to use polygon buffer.
	(hpgl_EP): ""
	(hpgl_ER): ""
	(hpgl_EW): ""
	(hpgl_FP): ""
	(hpgl_RA): ""
	(hpgl_RR): ""
	(hpgl_WG): ""
	(hpgl_get_poly_render_mode): routine to get distinguish between
	rendering with hpgl/2 line fills vs. pcl fills.

	* pglfill.c (hpgl_AC): added defaults for AC.
	(hpgl_FT): local used before all error checking.
	(hpgl_LT): saving and restoring of line type implemented.  Removed
	recursion.

	* pglabel.c (hpgl_print_char): removed setting of cap and join.

	* pginit.c (hpgl_do_reset): initialization code for polygon
	buffer. 

	* pggeom.h: added epsilon for all routines comparing floating
	point values.

	* pgdraw.h: removed hpgl_set_graphics_state() from interface.
  	comments and new parameter for hpgl_add_arc_to_path()
 	prototypes for hpgl_gsave, hpgl_grestore,
 	hpgl_copy_polygon_buffer_to_current_path,
 	hpgl_copy_current_path_to_polygon_buffer  (details below)
	removed hpgl_draw_and_preserve_path().

	* pgdraw.c (hpgl_set_graphics_dash_state): hpgl/2 dot dash support
	(LT0) implemented properly.
	(hpgl_polyfill_bbox): new routine to create a bounding box used
 	for hpgl vector style fills.
	(hpgl_set_clipping_region): modified to not clip if vector
 	filling, gs_clip() is used instead.
	(hpgl_set_plu_to_device_ctm): removed unnecessary inner block.
	(hpgl_set_user_units_to_plu_ctm): modified to attempt scaling if
 	scaling is on, this is not complete.
	(hpgl_set_ctm): changed from private to public.  Needed by
 	routines that must maintain the current device space position (SC,
 	RO, etc.)
	(hpgl_polyfill): new routine for polygon vector filling algorithm.
  	See comments in code for problems being worked on.
	(hpgl_polyfill_using_current_line_type): new routine to setup
 	vector filling code -- gsave and clipping.
	(hpgl_map_fill_type): modified not to fall back to solid when the
 	fill type is vector.
	(hpgl_set_drawing_color): added call to fill polygon with current
 	line type if appropriate.
	(hpgl_set_graphics_state): changed back to a private routine.
	(hpgl_start_path): removed obsolete comments.
	(hpgl_add_arc_to_path): boolean parameter for an implicit moveto
	to the first position irrepective of pen up/down state.  CI uses
	this.
	(hpgl_draw_current_path): Changed comment.
	(hpgl_draw_current_path): support for new line fill render mode.
	(hpgl_copy_current_path_to_polygon_buffer): new routine to save
	the current path to gl/2's polygon buffer.
	(hpgl_copy_polygon_buffer_to_current_path): the opposite.
	(hpgl_gsave): just gs_gsave plus maintenance of gl/2's first
	moveto state
	(hpgl_grestore): same

	* pgconfig.c (hpgl_DF): removed call to hpgl_SC and simply set
	scaling to scaling_none.  This is a workaround to the more elaborate
	problem that the gl/2 graphics state is not adequately initialized
	when the first SC is used implicitly.  
	(hpgl_RO): simplification of RO and now maintains current point by
	tranforming current device position.
	(hpgl_SC): Like RO now maintains current device point and changes
	to use a local structure instead of using the state structure
	prior to all error checking.


Version 0.25 (5/12/97)
======================

More bug fixes.  This fileset produces halfway reasonable output from many
of the Genoa FTS files.

This version requires pl library version 1.14 or later.

(LPD) Fixes bugs:
	- The 3-point arc algorithms often drew incorrect portions of the
arc.  (pgvector.c)
	- The rounding algorithm for chord angles could result in drawing
too long an arc.  (pgdraw.c)
	- Some PCL commands didn't include name strings for debugging.
(pgframe.c)
	- The Genoa FTS (0010) apparently requires the built-in scalable
fonts to treat the space character as a control code rather than a printable
character, so that it is affected by explicit setting of HMI.  (pcfont.c)
	- Tab positions were computed relative to the edge of the logical
page rather than relative to the left margin.  (pcursor.c)
	- The HMI wasn't always recomputed when a new font was selected.
(pcfont.c)
	- Text wasn't clipped at the margins.  (pcfont.c)
	- Because of a typo, selecting end-of-line wrapping could cause an
error.  (pcfont.c)
	- Rounding caused lines to wrap one character too early.  (pcfont.c)
	- The margins weren't reset properly when changing print direction.
(pcdraw.c)
	- Raster graphics with presentation mode 3 in landscape orientation
were drawn in the opposite direction from the correct one.  (rtraster.c)
	- Fill patterns were rendered at the current resolution rather than
the correct one (normally 300 dpi).  (pcdraw.c)
	- Fill patterns weren't rotated to match the orientation and print
direction.  (pcstate.h, pcdraw.c)
	- The vertical cross-hatch pattern was incorrect.  (pcdraw.c)
	- The HMI sometimes wasn't computed from the font when needed.
(pcpage.c)
	- The right margin was set to the left edge of the specified column
rather than the right edge.  (pcpage.c)
	- The text length should be stored as a floating point value to
preserve accurate margin values when changing print directions.  (pcstate.h)
	- We didn't track both rotated and unrotated logical page
dimensions.  (pcstate.h, pcdraw.c, pcpage.c)
	- There was confusion about whether the pitch_100ths value in font
headers was the pitch in 100ths of a design unit (nominally, 1 point) or the
pitch in 100ths of characters per inch, because downloaded PCL font headers
use the former concept but pitch setting commands use the latter.  We now
provide both.  (pcdraw.c, pcfont.c, pcfsel.c, pcsfont.c, pcstatus.c,
pgchar.c, pgdraw.c, pginit.c, pglabel.c)

(HAS) Change Log:  (note: there might be a few omissions this time)

	* pgvector.c (hpgl_CI): corrected stray lines from center of
	circles.  

	* pggeom.c (hpgl_compute_arc_center): did not use absolute value
	to check for degenerate case.

	* *.[ch]: general cleanup of function not using hpgl_call() and
	removal of obsolete calls.

	* pgdraw.c (hpgl_start_path): moved recording of first point to
	hpgl_start_path().

	* pgpoly.c (hpgl_PM): missing "break" in case statement.  No
	associated bug.

	* pgdraw.c (hpgl_set_user_units_to_plu_ctm): apply P1 and P2
	translation only when scaling is on.  Recovers first panels in fts
	1060 tests.

	* pgvector.c (hpgl_CI): corrected circle implementation.

	* pgdraw.c (hpgl_draw_current_path): even odd and nonzero winding
 	changes. (new functionality)

	* pgstate.h: state changes to support even-odd and non-zero
	winding fills. (new functionality)

	* pgdraw.c (hpgl_add_arc_to_path): implemented peter's fix for
	getting the correct number of chords for arcs.

	* pgvector.c (hpgl_arc_3_point): integrated peter's fix for 3
	point arc.
	
	* pgvector.c (hpgl_arc_3_point): changed arc three point to use
	hpgl_arc() routine.

	* pglabel.c (hpgl_process_buffer): fixed formfeed and horizontal
	tabs processing.

	* pgdraw.c (hpgl_map_fill_type): partial support for character mode
	filling.  Set drawing color correctly so the fts headers are now
	visible. 

	* pglabel.c (hpgl_LB): bug fix LB not processing carriage return
	introduced with pcl023.

	* pgdraw.c (hpgl_set_graphics_state): made private and removed
	from interface in pgdraw.h.

	* pglabel.c (hpgl_print_char): removed call to
	hpgl_set_graphics_state. 

	* pgstate.h: documented hpgl/2 coordinate system.

Version 0.24 (5/7/97)
=====================

More bug fixes.  This is an intermediate fileset to synchronize LPD's and
HAS's changes.

(LPD) Fixes bugs:
	- The makefile rule for pcl5.dev had a typo (PCLOJB for PCLOBJ).
(pcl.mak)

(LPD) Makes stick font characters always use round caps and joins, for
visual consistency.  (pgdraw.h, pgdraw.c, pglabel.c)

(HAS) Numerous fixes to graphics -- changes will be included in the log for
the next fileset.  (pggeom.h, pgstate.h, pggeom.c, pgdraw.c, pglfill.c,
pgvector.c)

Version 0.23 (4/16/97)
======================

More bug fixes.  Labels now appear in the correct place.

(LPD) Splits off functionality from two existing files:
	- pcfont.c => pcfsel.h, pcfsel.c (font selection machinery used by
	both PCL and HP-GL/2)
	- pgchar.c => pglabel.c (CP and LB commands)

(LPD) Finishes parsing the font selection and character transformation
commands for HP-GL/2: CF, FI, FN, SI, SR.  Looks up fonts when necessary.
Does *not* extend actual text writing to handle any font other than the
stick font, or to handle transformations (slant, direction, size).
(pcl.mak, pcfont.h, pcfsel.h, pcfont.c, pcfsel.c, pgstate.h, pgchar.c,
pglabel.c)

(LPD) Moves error printing into a procedure to reduce code size.  (pgmisc.h,
pgmisc.c)

(LPD) Redesigns the macros for setting up arguments for calling HP-GL/2
commands to generate less code.  (pgmand.h, pgconfig.c, pglabel.c, pgpoly.c,
pgvector.c)

(LPD) Fixes HP-GL/2 bugs:
	- SA and SS recomputed the current font unnecessarily.  (pgchar.c)
	- DT considered character code 5, rather than 10 (LF), an invalid
terminator.  (This is a typo in the H-P documentation.)  (pgchar.c)
	- CP had a typo for label origin 17.  (pglabel.c)
	- The computation of the character cell width was incorrect.
(pglabel.c)
	- SB didn't decache affected fonts.  (pgchar.c)
	- Transparent data mode wasn't implemented.  (pglabel.c)
	- (Stick font) characters were not scaled properly according to the
current font size.  (pggeom.h, pglabel.c)
	- The character cell size wasn't computed properly depending on
whether the font was fixed- or proportional-spaced.  (It's still wrong, but
it's closer to being right.)  (pglabel.c)
	- The graphics state (in particular, the drawing color) wasn't being
set up properly for characters.  (pgdraw.h, pgdraw.c, pglabel.c)

(HAS) Fixes bugs:
	- A relative move as the first element of a path produced incorrect
positioning.  (pgdraw.c)
	- A typo in computing the origin offset caused labels to be
misplaced.  (pglabel.c)

Version 0.22 (4/13/97)
======================

This is another bug fix fileset.  With these fixes, we produce nearly
correct output from the first CET file (14_01), allowing for the fact that
we don't have the right set of fonts; we get semi-reasonable output from CET
14* through 16*, except as noted below; and we can run the entire non-GL/2
CET subset (14* through 23*) without crashing, except for 31_01.

(LPD) Fixes bugs:
	- When printing to a real printer, the left edge of the page was
clipped inappropriately.  (pcdraw.c, pcmain.c)
	- The fonts loaded from Windows didn't include Symbol or WingDings.
(pcfont.c)
	- The font matching algorithm didn't recognize the same typeface
from a different vendor as a partial match.  (pcfont.c)
	- Only the last font loaded from Windows was actually entered in the
built-in font dictionary.  (pcfont.c)
	- The CTM was set wrong for landscape orientation.  (pcdraw.c)
	- Modifying the HMI didn't properly affect fixed-space fonts.
(pcfont.c)
	- If a font was selected by ID, setting the height or pitch
invalidated the font, rather than just scaling it.  (pcstate.h, pcfont.c)
	- Vertical cursor positioning by rows didn't add the 0.75 * VMI
fudge factor.  (pcursor.c)
	- The character complement for the preloaded fonts wasn't set.
(pcfont.c)
	- The check for symbol set support in unbound fonts was incorrect.
(pcfont.c)
	- check_support didn't complement the glyph vocabulary number in
fonts, leading to invalid array accesses.  (pcfont.c)
	- The graphics state client data pointer didn't point back to the
pcl_state_t.  (pcmain.c)
	- The raster graphics left margin was never set, and the default
width was not computed correctly.  (rtraster.c)
	- For text, the Pattern ID command took effect immediately, instead
of at the next Select Pattern command.  (pcfont.c)
	- Out-of-range cross-hatch pattern IDs could cause memory access
errors.  (pcdraw.c)
	- Selecting a font by ID didn't set the symbol set correctly.
(pcfont.c)
	- Symbol mapping wasn't disabled when selecting a bound font.
(pcfont.c)
	- The symbol map wasn't set properly if the selected font was the
very first font in the dictionary.  (pcfont.c)
	- User-defined patterns caused illegal memory accesses.  (pcstate.h,
pcdraw.c)
	- If the GL/2 parser was both in polygon mode and LOST, commands
that were to be skipped in either case caused a memory fault.  (pgparse.c)
	- If a grouped escape sequence was terminated prematurely by a
control character, that character was discarded.  (pcparse.c)
	- The CAP bookkeeping for changes in print direction was incomplete.
(pcdraw.h, pcstate.h, pcdraw.c, pcpage.c, pgframe.c, rtraster.c)
	- The CTM was set wrong for rotated print directions.  (pcdraw.c)
	- The CTM was set wrong for 180 and 270 degree rotations.
(pcdraw.c)
	- Rectangles didn't follow the print direction.  (pcrect.c)
	- Setting the orientation didn't eject the current page.  (pcpage.c)
	- Setting the orientation to the same value wasn't a no-op.  (The
PCL5 TRM doesn't say this is supposed to be the case, but it is.)
(pcpage.c)
	- The default right margin wasn't set correctly.  (pcpage.c)

(LPD) Implements missing functions:
	- End-of-line wrap for text.  (pcfont.c)
	- Deleting individual characters from a soft font (ESC * c 3 F).
(pcsfont.c)
	- Symbol mapping for unbound fonts.  (pcfont.c)
	- Intellifont downloading and (unhinted) rasterizing.  (pcifont.c,
pcsfont.c)
	- Diagonal-line cross-hatch patterns were reflected, because of the
reflected coordinate system.  (pcdraw.c)
	- The drawing color wasn't set for raster graphics.  (rtraster.c)
	- The cursor stack didn't interact properly with changes in print
direction.  (pcursor.c)
	- Margins weren't permuted properly when changing print direction.
(pcdraw.c)
	- The default raster width was computed from the right margin
instead of the right edge of the logical page.  (rtraster.c)

(LPD) Adds text tracing to the PCL tracing output.  (pcparse.c)

(LPD) Initializes the default symbol set to PC-8 rather than Roman-8, for
compatibility with the LJ 6MP being used for testing.  Eventually this will
have to be addressed in a more systematic way.  (pcfont.c)

(HAS) ChangeLog:

	* pgstate.h: new data structures to support hpgl label buffering.

	* pgfont.c: program that generates the font data modified to not
	multiply the font height by 1.5.  The calcomp font code did this
	for an unknown reason.

	* pgdraw.c (hpgl_set_label_to_plu_ctm): modified to use the
	current selected font.

	* pgchar.c (hpgl_get_current_cell_width): updated to use current font
	selection.
	(hpgl_get_current_cell_height): updated to use current font
	selection, and the character cell was incorrectly calculated to be
	2x the current point size -- changed to 1.33 point size for stick
	fonts. 
	(hpgl_CP): added comments and a note about incorrect calculation of
	extra space command.
	(hpgl_update_label_length): new funtion to update the length of
	the current label string as characters are buffered.
	(hpgl_init_label_buffer): new function to allocate a label buffer
	and set up the label state.
	(hpgl_resize_label_buffer): new function to resize the label
	buffer if we run out of space.
	(hpgl_destroy_label_buffer): new function to deallocate the
	current label buffer and reset the label state.
	(hpgl_buffer_char): new function to place a character into the
	character buffer.
	(hpgl_get_character_origin_offset): new function to calculate the
	label origin as defined by LO.
	(hpgl_process_buffer): new function to process the current label
	buffer of characters.
	(hpgl_LB): modified to use the new label buffering scheme.

Version 0.21 (4/1/97)
=====================

This fileset, like many to come, mostly fixes bugs.

(LPD) Fixes bugs:
	- White rectangles weren't drawn properly (they could be drawn with
random data or not at all).  (pcstate.h, pcrect.c)
	- Re-entering PCL from HP-GL/2 didn't copy back the cursor position
if requested.  (rtmisc.c)
	- Shading and pattern filling weren't implemented in PCL mode!
(pcstate.h, pcdraw.c)
	- The initial cursor position didn't reflect the initial top margin.
(pcl.mak, pcursor.c)
	- Setting the PCL CTM didn't take the left offset of the logical
page into account.  (We aren't sure what we did is correct.)  (pcdraw.c)
	- The definition of paper sizes used long and int rather than coord.
(pcstate.h)
	- The HP-GL/2 FN command incorrectly set the primary rather than the
secondary font.  (pgchar.c)
	- Some private procedures were declared 'static' rather than
'private'.  (pgchar.c)
	- Bitmap fonts were rendered upside-down.  (pcfont.c)
	- If the current font didn't define the 'space' character, spaces
were ignored, rather than moving by the HMI.  (pcfont.c, pcursor.c)
	- Scalable fonts weren't scaled correctly.  (pcfont.c)
	- Text didn't properly select the current color and pattern.
(pcfont.c)
	- Switching fonts didn't reset the HMI.  (pcdraw.h, pcstate.h,
pcursor.c, pcdraw.c, pcfont.c, pcpage.c)
	- The pitch value of bitmap fonts was computed incorrectly.
(pcsfont.c)

(LPD) Adds command names to PCL command tracing output.  (pcommand.h, pc*.c,
rt*.c)

(HAS) ChangeLog:

* pgstate.h,pginit.c,pgframe.c,pginit.c,pgframe.c,*.[ch].
coordinate changes for pcl picture frame and plot size.

* pgchar.c: changed static function declarations to private.

Version 0.20 (3/26/97)
======================

This is the first numbered fileset.

(HAS) Change log:

	* pgdraw.c: deleted obsolete function to concatenate a character ctm.
	(hpgl_set_ctm): further simplification of ctm stuff.

	* rtmisc.c (rtl_enter_hpgl_mode): new functionality to let hpgl/2
	inherit pcl's current cap.

	* pgdraw.c (hpgl_add_pcl_point_to_path): new function to add a pcl
	point to an hpgl/2 path.

	* pgdraw.h: external declaration for hpgl_add_pcl_point_to_path()
	
	* pgframe.c (pcl_vert_pic_frame_size_decipoints): default picture
	frame height no longer pcl text length * vmi.  The previous setup
	divided by 48 due to a pcl problem that should be fixed in tandem
	with this fix.

	* pgmisc.h (hpgl_lost): new definition to return a boolean result
	for lost mode state.

	* pgvector.c (hpgl_plot): bug fix to properly handle no args
	relative case.
	(hpgl_PA): change to set the relative flag first then return the
	value of the function call.  The code was originally this way and
	I do not recall the origin of the change.

	* pgstate.h (hpgl_save_pen_state): now takes a flag to indicate
	which action to take.  Was three separate macros.
	(hpgl_restore_pen_state): ditto.
	

	#defines for pen relative, pen down, pen pos and pen all, used by
	save and restore macros.

	removed obsolete last state values now pen state must be stored in
 	a local structure (hpgl_pen_state_t) provide by the caller of the
 	macro.

	* pgpoly.c All pen state macros updated.

	* pgchar.c (hpgl_get_carriage_return_pos): new
 	function to get the carriage return position.
	(hpgl_set_carriage_return_pos): new function to set the carriage
 	return position.

Fileset of xx/xx/97
===================

This fileset was not meant for actual use and was not archived, but this
wasn't communicated clearly, so it wound up being used anyway.

(LPD) Fixes bugs:
	- Semicolons were missing after several calls of hpgl_call.
(pgvector.c)
	- Many dependencies were missing from the makefile.  (pcl.mak,
pgframe.c)
	- The CTM wasn't set properly for raster images.  (rtraster.c)
	- A system file was included before std.h, causing conflicts for
type names.  (pgmand.h)
	- Many files didn't include stdio.h, which is required for NULL on
some systems.  (pccpalet.c, pcmacros.c, pcprint.c, pcsymbol.c)
	- The simple color palettes weren't defined.  (rtcolor.c)
	- The list of object files in a module definition was incorrect.
(pcl.mak)
	- The text length was computed incorrectly.  (pcpage.c)

(LPD) Renames and restructures the makefiles, in preparation for the move to
CVS.  (pcl5.mak => pcl.mak, ugccpcl.mak => pcl_ugcc.mak, watcpcl.mak =>
pcl_watc.mak)

(LPD) Refactors the hpgl_call macros to reduce source code size.  (pgmisc.h)

(LPD) Makes pcmain.c always compile with DEBUG, so we can always get at
least minimal statistics.  (pcmain.c)

(LPD) Makes the loading of the initial fonts search a list of directories,
rather than only looking in the current directory.  (pcfont.c, pcmain.c)

(HAS) Change log:

	* pgvector.c (hpgl_arc): modified to draw the current path upon
	entry. 

	* pgpoly.c: removed occurrences of hpgl_set_current_position()
 	commensurate with change to positioning change below: search for
 	NOTE:

	* pgmisc.c (hpgl_set_lost_mode): commented out code that can cause
	an infinite loop.  This will have to be approached differently.
	It is not part of functional completeness so I am putting it off
	for a bit.

	* pgdraw.h (hpgl_init_path): replaced state variable have_path
	with have_first_moveto().  have_path is not used in the code anymore.

	* pgdraw.c (hpgl_set_graphics_line_attribute_state):
 	gs_setlinejoin was receiving a parameter that specified the
 	current cap and gs_setlinecap was receiving the line
 	join. (fixed).
	(hpgl_set_ctm): broken down into 2 functions as follows:
	(hpgl_set_user_units_to_plu_ctm): documentation is included in the
 	function's name ;-)
	(hpgl_set_plu_to_device_ctm): documentation is included in the
 	function's name ;-)
	(hpgl_map_fill_type): bug fix to map unsupported values to solid
 	black.
	(hpgl_map_id_type): same.  

	NOTE:: the next 2 changes are related to a design change.
  	hpgl_get_current_position() and hpgl_set_current_position() will
 	be used to update the current position.  These values are updated
 	as values are added to the current path.  The previous setup only
 	updated hpgl's state when paths were cleared.

	(hpgl_get_current_position): new routine to get hpgl's current
 	point.
	(hpgl_set_current_position): updated to set hpgl's position and
 	not look at gs_currentpoint().
	(hpgl_add_point_to_path): modification to reflect design change.
  	Simplification.
	(hpgl_add_point_to_path): added gs_point structure to hold x and y
 	values.
	(hpgl_add_point_to_path): dumb bug fix: there should not be an
 	"else" in hpgl_add_point_to_path.  After adding the first moveto
 	instruction execute the desired operation.
	(hpgl_add_point_to_path): removed outdated comment.
	(hpgl_add_arc_to_path): number of chord calculation was mixing
 	radians and angles resulting in bogus value.
	(hpgl_add_bezier_to_path): updated function to explicitly set the
 	current position to the last bezier curve coordinate because this
 	is the only hpgl drawing primitive that does not use
 	hpgl_add_point_to_path() which sets the current position for other
 	routines.
	(hpgl_close_path): this logic was taken out of
	hpgl_draw_current_path() to reduce complexity.
	(hpgl_draw_current_path): reset the plu to device ctm
	effectively factoring out user scaling when drawing the current
	path to imitate hpgl/2 style setting of line width.

	* pgconfig.c (hpgl_DF): moved default scaling initialization to
	come before implicit moveto.
	(hpgl_DF): changed to use hpgl_args_set_real() instead of hpgl_args_setup()
	(hpgl_DF): removed commented out code that initialized SM and RF.
	(hpgl_SC): parser bugfix: The SC command should parse in
	the order xmin, xmax, ymin, ymax, it was xmin, ymin, xmax, ymax.
	(hpgl_SC): parser bugfix: Once we hit "case 4" the default scaling
	should be hpgl_scaling_anisotropic not uninitialized.

	* pgchar.c (hpgl_CP): removed set current position calls.
	(hpgl_print_char): removed set current position calls.

Fileset of 3/6/97
=================

(LPD) Fixes bugs:
	- Splits the definition of HPGL2_OTHER in the makefile into two, to
avoid exceeding the MS-DOS command line limit.  (pcl5.mak)
	- Removes a duplicate definition of hpgl_error.  (pginit.c)

(HAS) Changes and fixes:

	* pgvector.c (hpgl_plot_and_clear): new function to plot points
	and clear lost mode if necessary.  Changes to implement lost mode.

	* pg*.c:  mods to get rid of HPGL_COMMAND_POLY and use the new
	HPGL_COMMAND with a flag as the 3rd arg.

	* pgmand.h: removed HPGL_COMMAND_POLY macro.  Added flag 
 	argument to HPGL_COMMAND_MACRO which currently defines how the
	command should behave wrt polygon mode and lost mode.

	* pgmisc.h (hpgl_call_check_lost): implemented
	hpgl_check_lost_mode macro.

	* pgdraw.c (hpgl_clear_current_path): set first moveto state to
	false in clear current path.

	* pgvector.c (hpgl_PA): implemented clearing of lost mode.

	* pgstate.h (hpgl_restore_pen_state): pgstate.h missing
	pgstate_INCLUDED. 

	* pgmisc.c (hpgl_set_lost_mode): function to set and clear lost
	mode.  Interface in pgmisc.h.

	(hpgl_error): moved error handling to pgmisc.[ch]

	* pgstate.h: data structures for lost mode.

Fileset of 3/4/97
=================

(LPD) Fixes bugs:
	- PCL drawing didn't set the CTM and clipping region when it needed:
it assumed (incorrectly) that they would stay unchanged between commands.
(pcfont.c, pcjob.c, pcpage.c, pcrect.c, rtraster.c)
	- Page clipping in PCL mode wasn't implemented.  (pcdraw.h,
pcstate.h, pcdraw.c)

Fileset of 3/3/97
=================

(LPD) Fixes bugs:
	- The number-of-chords computation wasn't consistent for positive
and negative angles.  (pggeom.c)
	- The conversion factor from inches to plotter units was wrong.
(pggeom.h)
	- The HP-GL/2 translation for reverse landscape orientation was
incorrect.  (pgdraw.c)
	- The first point of HP-GL/2 beziers was defined incorrectly because
of a typo.  (pgdraw.c)
	- Entering polygon mode with PM[0] drew the current path instead of
clearing it.  (pgpoly.c)
	- The RA command didn't draw the rectangle or clear the path.
(pgpoly.c)

(LPD) Other changes:
	- Replaces the calculation of the center of a 3-point arc with a
simpler algorithm that doesn't use any transcendental functions.  (pggeom.c)
	- Cleans up comments, coding style, and other minor issues in
various files.  (pggeom.h, pgdraw.c, pgchar.c, pggeom.c, pgpoly.c,
pgvector.c)

Fileset of 2/26/97
==================

(LPD) Fixes bugs:
	- The main program had become incompatible with a library update.
(pcmain.c)
	- Downloaded TrueType fonts didn't allocate a char_glyph table.
(pcsfont.c)
	- TrueType fonts didn't set the pitch or height values in the font
structure, and didn't use those values for computing scale factors.
(pcfont.c, pcsfont.c)
	- 'system' was misspelled 'sytem' in one file.  (pginit.c)
	- A couple of functions didn't have prototypes.  (pcl5.mak,
pgdraw.c, pginit.c)

(LPD) Updates the makefiles to include the new version.mak file.
(bcpcl.mak, watcpcl.mak)

(LPD) Adds a printout of the maximum memory allocated; changes several
debugging printouts to be conditional on -Z:.  (pcmain.c)

(LPD) Adds a "client data" pointer to the state, to give callbacks more
flexibility; uses it to implement page counting.  (pcmain.h, pcstate.h,
pcpage.c, pcmain.c)

(rcd) Changes and fixes:

pcdraw.c:
	Add calls to break/restart underlining when cursor moves.

pcfont.c:
	Add underlining.
	Make backspace use real character width for overstrike centering.
	Use an accurate calculation of point size from pitch of fixed-pitch
		fonts.
	Initialize "built-in" fonts for testing.  Ensure that at least one
		font gets loaded.
pcfont.h:
	Remove global gs font directory.
	Add macros for break/restart underlining checks.

pcmain.c:
	Add calls to initialize "built in" fonts and symbol sets.

pcpage.c:
	Add calls to break/restart underlining at page boundary.

pcsfont.c:
	Move the gs-level font directory into the state.

pcstate.h:
	Move gs-level font directory into state.
	Add dictionaries for built-in fonts, symbol sets.
	Add state values for tracking underline.

pcstatus.c
	Adapt to new format of symbol sets.
	Do part of a merge of IDLIST code for use with symbol sets.
	Adapt to uniform format of built-in/soft font dictionaries.

pcsymbol.c:
	Create similar dictionaries for built-in, soft symbol sets, and
		adapt to this structure.
	Initialize "built in" symbol sets.

pcursor.c:
	Add calls to break/restart underlining when cursor moves.

(HAS) Changes and fixes:

	* pgstate.h: added comments about removing state variable that
	need to be removed.

	* pgdraw.c (hpgl_draw_current_path): added code to set current
	GL/2 position.

	* pgchar.c (hpgl_LB): replaced calls to print and update char with
 	one call to hpgl_process_char() see comments for
 	hpgl_process_char().

	* pgchar.c (hpgl_print_char): grouped hpgl_arc_to operation with
 	default in switch so we would get an "unsupported" character
 	operation with arc operations.

	* pgchar.c (hpgl_print_char): now set GL/2's state position
	correctly.  This was a bug before because the current position was
	not being extracted from device space, and the ctm is always
	modified to render characters.
	
	* pgchar.c (hpgl_CP): changed PU to use default value (no args)
	instead of current position.

	* pgchar.c (hpgl_LB): worked around design flaw by saving and
	restoring the state of the HPGL/2 pens in local variables.  This
	does not quite work as the variables state is not valid if hpgl_LB
	is reinvoked because of e_NeedData.  The solution is to save the
	pen state/status  using a stack.  (TODO).  This solution results
	in stray lines in the FTS tests.  

	* pgchar.c (hpgl_process_char): new routine that prints the
	character if it is printable and update the current position.

	* pgchar.c (hpgl_print_char): added code to process relative data
	and no argument data in stick font data code.

	* pgchar.c: added ctype.h.  Only printable characters are
	stored in the stick font character set table, we import
	isprint() from ctype.h

	* pgfont.c: (new file) stick font data to be accessed via data
	structures exported in pgfont.h.  This data is built from the CalComp
	font data using the program hp_symb.  pgfont.c should not be modified.

	* pgfont.h: (new file) interface to stick font data.  More compact
	representations are possible, for now the emphasis is on
	readability and debugging ease.

Fileset of 1/13/97
==================

(LPD) Removes some code that has been moved to the pl* library, and adjusts
some printouts to parallel PCL XL.  (pcmain.c)

(LPD) Adds a bounding box device for accurate detection of empty pages.
(pcmain.c, pcpage.c)

HP-GL/2
-------

Thu Jan  9 19:03:31 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgstate.h: removed implicit execution hack.

	* pginit.c (hpgl_default_coordinate_system): added this function to
	set up a default coordinate system for GL/2 see the lengthy
	comment prior to the comment for details.
	(hpgl_do_reset): rearranged initialization of coordinate system.
	got rid of implicit execution business.

Tue Jan  7 14:43:25 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgframe.c (pcl_vert_pic_frame_size_decipoints): change to add
	derive the vertical picture frame from the text length not the
	logical page length as previously implemented.

	* pgvector.c (hpgl_arc): added no argument case for P[ARDU].

Mon Jan  6 00:42:47 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgpoly.c (hpgl_EA): removed setting of pen_down in EA which was
	causing stray lines in fts borders.

Sun Jan  5 21:09:50 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgmand.h (hpgl_call): added empty function hpgl_error() to be called
	only when an error occurs.  Used for setting breakpoints - DEBUG only.

	* pgpoly.c (hpgl_wedge): added PU to current position at the
	beginning of the wedge, this guarantess the path begins with a
	moveto. 

Fileset of 1/8/97
=================

PCL
---

Fixes bugs:
	- (LPD) The Paper Source command (ESC & l <source> H) did an
unconditional page eject instead of a conditional one.  (pcpage.c)
	- (HAS) The computation of logical page size had the height and
width interchanged.  (pcdraw.c)

(LPD) Changes the second argument of pcl_end_page from a Boolean to an
enumerated type for easier reading.  (pcommand.h, pcjob.c, pcpage.c,
pcstatus.c, pcursor.c, rtmisc.c)

(LPD) Changes the name of the end_page procedure in the PCL state to
finish_page, to avoid confusion with pcl_end_page.  (pcstate.h, pcmain.c,
pcpage.c)

Sun Jan  5 1997 Dick Dunn (rcd@talisman.com)

    pcl5.mak
	Add definition, references to pcsymbol_h

    pldict.h
	Add pl_dict_length() to find active size of a dictionary

    pldict.c
	Add pl_dict_length() to find active size of a dictionary

    plfont.h
	Change condition on defining pl_load_tt_font to make it more robust.

    plsymbol.h
	Resolve common definitions of symbol maps _vs_ symbol sets.
	Add a length value for built-in symbol maps.
	Remove unneeded definitions.

    plsymbol.c
	Adapt to symbol-set/map distinction.
	Add procedures to find a symbol map and to check whether a font
	supports a symbol set.

    pcfont.h
	Make the decache-font procedure visible, since it must be called
	from some non-font code that forces re-selection.

    pcfont.c
	Make pcl_decache_font global (above).
	Implement correct tests for selection on symbol set.
	Record symbol map to be used.
	Move font-initialization hack here (from pcsfont.c).

    pcsfont.c
	Move font-initialization hack out to pcfont.c

    pcstatus.c
	Implement symbol-set listing.
	Implement listing of symbol sets for font-extended.

    pcsymbol.h
	New file: definitions for PCL5 symbol sets, not shared with XL.

    pcsymbol.c
	Move local definition of symbol set out to pcsymbol.h.
	Remove entity header from symbol set; reflects symbol set/map
	distinction.
	Decache fonts when symbol sets change.
	Add procedures to find a symbol map and to check whether a font
	supports a symbol set.

    pcmain.c
	Make built-in font initialization hack explicit.

    pcstate.h
	Add symbol maps to fonts selected and current font.

HP-GL/2
-------

Sun Jan  5 21:09:50 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgpoly.c (hpgl_wedge): added PU to current position at the
	beginning of the wedge, this guarantess the path begins with a
	moveto. 

Sat Jan  4 01:16:45 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_set_clipping_region): disabled clipping region
 	temporarily as it does not seem to be interacting with rotation
 	correctly.

	* pgframe.c (pcl_vert_pic_frame_size_decipoints): updated picture
	frame implicit

	* pgstate.h: added state variable to indicate implicit execution
	of Set Picture Frame Anchor Point.  The semantics differ explicit
	vs. implicit execution *** PETER *** you may want to handle this
	differently.  Please let me know.

Fri Jan  3 00:13:05 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_draw_current_path): removed unused variable which
	was used by gs_currentpoint() which has been removed.
	(hpgl_set_graphics_dash_state): fixed problem where gs dashed line
	state was being maintained while the hpgl state line state changed
	to solid.  *** PETER *** Should we do an "initgraphics" for
	pcl/gl/2 resets?

	* pgconfig.c (hpgl_RO): implemented, see code comments for
	potential problem.

	* pgstate.h: added state variable to indicate that we have the
	initial moveto in the path.  (see previous entry for details)

	* pgdraw.c (hpgl_draw_current_path): replaced call to get the
 	current point to use the state positiion in GL/2.  Change due to
 	preference, does not fix anything.
	(hpgl_draw_current_path): RO implementation revealed problem with
 	clearing the current path with only a moveto.  Does not work with
 	gs graphics as the path does not get created until later.
	(hpgl_add_point_to_path): added code to maintain state variable
 	pgls->g.have_first_moveto.

	* pgconfig.c (hpgl_RO): added default angle of 0 degrees, the
	previous arrangement had angle uninitialized if RO had no args.

	* pgvector.c (hpgl_PE): **PETER** the PE command must save and
 	restore the !relative pen state! upon entry and completion.  I
 	have added hpgl_save(restore)_pen_relative_state to pgmand.h.  As
	I understand things this must be done in the parser.  So I shall
	leave it to you for now.
	(hpgl_PE): corrected bug in PE code - the PE flag for SP must be
	ignored in polygon mode as SP is an illegal command.


Thu Jan  2 23:35:58 1997  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgstate.h (hpgl_save_pen_relative_state): provided parenthesis
	and renamed macros to save and restore postion, relative state and
	down state.

	* pgvector.c (hpgl_PU): added check for relative state.
	             (hpgl_PD):   "    "     "     "      "
		     (hpgl_PE): removed comments about assuming the parser
	             was not reentrant and reimplemented plotting commands
	             for polyline encoded vectors.

Mon Dec 30 14:27:16 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgvector.c (hpgl_AA): strange intermittent bug with gdb and
 	longjmp.  It seems that if a breakpoint is set on a function that
 	calls the parser and the parser needs more data it appears to
 	longjmp back to the breakpoint in the debugger.  Disabling the
 	breakpoint fixes the problem.
	             (hpgl_arc): missing parsing for chord angle.  Not
 	sure if I introduced this or if it was always that way.

Fileset of 12/31/96
===================

PCL
---

(LPD) Changes the API of the char_width procedure in a pl_font_t to take a
pl_symbol_map_t instead of a pl_symbol_map_collection_t, and also to take a
const gs_matrix *.  Removes the pl_symbol_map_collection_t type, since it
isn't needed anywhere right now.  (plfont.h, plsymbol.h)

HP-GL/2
-------

Mon Dec 30 01:04:19 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgvector.c (pe_args): added to pen selection /**** SELECT PEN ****/.
	(hpgl_PE): added drawing command.

	* pggeom.h (hpgl_3_colinear_points): fixed typo bug in
	hpgl_3_colinear_points().

	* pggeom.c (hpgl_compute_arc_coords): fixed bug in
	hpgl_compute_arc_coords, using sin() instead of cos().

Sun Dec 29 21:43:23 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgpoly.c (hpgl_wedge): implemented.
	(hpgl_EW): implemented.
	(hpgl_WG): implemented.

	* pggeom.c (general): HAS -- not enough error checking in pggeom.c.

	* pggeom.h: new routine hpgl_compute_vector_endpoints added to
	interface.  Calculates the endpoints of a vector given start
	point, an angle (degrees) and magnitude. (implementaion in pggeom.c)

	* pgpoly.c (hpgl_rectangle): corrected problem in building polygons
	because the macros only support the passing of two arguments as
	to hpgl_PD() function.  I have changed the calling sequences and
	not investigated the problem.  hpgl_rectangle appears to be
	implemented correctly now.
	(hpgl_wedge): implemented.

	* pgvector.c (hpgl_plot): replaced unimplemented return with 0
 	return.

Fri Dec 27 01:08:39 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgstate.h (hpgl_save_pen_position): added 2 new state variables
	to save the last position and up/down status, and new macros to
	access the variables

	* pgpoly.c (hpgl_rectangle): implemented.

Tue Dec 24 16:00:10 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_draw_current_path): updated
 	hpgl_draw_current_path to accept a second parameter, the rendering
 	mode.  Updated interface pgdraw.h and all callers to
 	hpgl_draw_current_path().

	* pgstate.h: renamed enumerated types to hpgl_rm_<type>
	(pcl_hpgl_state_s): removed hpgl_rendering_mode_t from the state
	as we will not need to maintain this variable.  It can be passed
	to the drawing routines passed by value.

	* pgpoly.c (hpgl_PM): changed to use boolean polygon mode.

	* pgparse.c (hpgl_process): changed to boolean polygon_mode.

	* *.c: removed hpgl_polygon_ignore().  The parser now deals with this.

Fileset of 12/24/96
===================

PCL
---

(LPD) Adds a pl_font_includes_char procedure for determining whether a given
character is defined in a given font and symbol set, and a
pl_font_char_width procedure for getting the character escapement of a given
character in a given font and symbol set.  MOST OF THE FUNCTIONALITY IS NOT
IMPLEMENTED YET, AND THE API IS SUBJECT TO CHANGE.  (plfont.h, plsymbol.h,
plchar.c)

HP-GL/2
-------

(LPD) Moves responsibility for ignoring non-polygon commands in polygon mode
into the parser:

	- Adds a 'polygon' flag to the command definition structure;
	removes the obsolete even_in_macro flag.  (pgmand.h)

	- Adds a HPGL_POLY_COMMAND macro, like HPGL_COMMAND except it defines
	a command that *is* allowed in polygon mode; removes the obsolete
	HPGL_SPECIAL_COMMAND macro.  (pgmand.h)

	- Changes the definition of all commands legal in polygon mode,
	and all commands with special argument parsing that must handle
	skipping in polygon mode themselves (CO, DT, LB, SM), from
	HPGL_COMMAND to HPGL_POLY_COMMAND.  (pgchar.c, pgconfig.c,
	pglfill.c, pgpoly.c, pgvector.c)

	- Changes the parser so that commands without the polygon flag are
	ignored in polygon mode.  (pgparse.c)

(LPD) Fixes a typo (mneumonics => mnemonics).  (pgmand.h)

(HAS):

Mon Dec 23 00:04:54 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_draw_current_path): added call to gs_fill for
 	polygon mode.

	* allfiles.c: added ignore macro to commands that are ignored in
	polygon mode, using the PCLTRM table on 21-41 "Polygon mode
	allowable commands".  Arguably this could be handled in the parser
	but it is more convenient to have the definition available when
	looking at the function that implements the mneumonic.
	
	* pgmand.h (hpgl_poly_ignore): macro to implement succesful return
	for commands that should be ignored in polygon mode.

Sun Dec 22 21:29:23 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgconfig.c (hpgl_DF): fixed bug due to HP documentation --
	uncovered by polygon implementation.  The DF command does the
	equivalent of PM0;PM2 clear the polygon buffer and exits polygon
	mode, not just PM as PCLTRM DF documentation states.

	* pgpoly.c (hpgl_PM): implemented.

	* pgdraw.c (hpgl_clear_current_path): implemented.
	(hpgl_close_current_path): implemented.

	* pgdraw.h: added hpgl_clear_current_path() and
	hpgl_close_current_path to the drawing interface.  These destroy
	and close paths respectively.  Used by PM.

	* pgdraw.c (hpgl_set_graphics_line_attribute_state): added warning
	message and fallback to vector if mode was not set to a know value.

Sat Dec 21 19:50:43 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_set_graphics_line_attribute_state): changes to
	set line attributes depending on what is being rendered -
	characters, lines, or polygons.
	

	* pgstate.h: added rendering mode of vector, polygon or
	character.  This affect line attributes see
	hpgl_set_graphics_line_attribute_state in pgdraw.c.

	* pgdraw.c (hpgl_set_clipping_region): set up clipping rectangle
	with gx_set_clip_to_rectangle();

Wed Dec 18 14:55:16 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgmand.h: removed hpgl_ok, we will use "return 0" for successful
	function termination.

	* pgvector.c (hpgl_CI): implemented circle.  (has bugs).

Sat Dec 14 13:45:27 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pginit.c (hpgl_do_reset): change to initialize picture frame and
	plot size before IN call.

Fileset of 12/13/96
===================

Procedures
----------

(LPD) Removes -O (optimization) from the default configuration in the PCL
makefile, because it creates too many problems for debugging.  (ugccpcl.mak)

PCL5
----

(LPD) Notes (here) the existence of the following barely-documented and
rarely-implemented PCL5e commands which we aren't planning to implement:
	ESC & k <0-7> W - Print Mode Selection (Color LJ5 Dev Guide p. 1-15)
	ESC & a <0-1> N - Negative Motion (ditto)
	ESC * r <0-2> Q - Raster Quality (ditto)
	ESC & o # Q - Mechanical Print Quality (Color LJ5 Dev Guide p. 1-18)
	ESC ( s # Q - Primary Font Quality (ditto)
	ESC ) s # Q - Secondary Font Quality (ditto)
	ESC & v # S - Text Color (ditto)
There is also one new command that we *should* implement:
	ESC & n <#bytes> W <data> - AlphaNumeric ID (LJ5 Dev Guide p. 23)

(LPD) Removes next_might_be_BS from the arguments of pcl_text, since it
doesn't provide any benefit.  (pcommand.h, pcfont.c, pcparse.c)

(LPD) Fixes bugs:
	- Using the current Ghostscript library caused a crash at startup,
because no halftone screen was set.  (pcmain.c)
	- Masked images didn't display, because they didn't initialize the
color correctly.  (rtraster.c)
	- An undeclared extern had crept in.  (pcsfont.c)

(RCD) Summary of changes:
	pcfont.c
		BS handling, elaboration of font scaling in pcl_text
	pcursor.c
		BS handling
	pcstate.h
		BS handling
	pcstatus.c
		minor tweak, avoid looking for FontName's that aren't there
	pcsfont.c
		hack to load some fonts
	pcpage.c
		tweak default right margin to nonzero so space works

HP-GL/2
-------

(HAS):

Thu Dec 12 14:07:04 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgconfig.c (hpgl_IP): fixed typo in IP.  Tracking the P2 y
 	coordinate was incorrect as it was using the X value instead of
 	the y value.
	(hpgl_picture_frame_coords): routine to derive the default picture
 	frame.
	(hpgl_IP): updated to use the new picture frame routine with
 	rounding ??? (see code).
	(hpgl_IW): Implemented the IW command, it is also used the new
 	picture frame routine.

	* pgdraw.c: set up picture frame and plot size scaling.

	* pgframe.c (pcl_hpgl_plot_horiz_size): modified plot size to
	to convert arguments to centipoints so that it is in the same
	units as the picture frame.  All the pcl commands in pgframe.c use
	centipoints internally now.

	* pgconfig.c (hpgl_IP): fixed location of P1 to be a function of
	the the pcl anchor points.

Wed Dec 11 00:28:56 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pcl5.mak (pginit_h): more missing dependencies.

	* pggeom.h (mm_2_plu): corrected typo in millimeter 2 plotter unit
	conversion (ARGH!).

	* pglfill.c (hpgl_PW): Changes to maintain pen width in plu's
	irrespective of current WU setting.  Also changed hpgl_WU to call
	hpgl_PW for setting default widths.

	* pgmand.h: Added gdebug.h and stdio.h (for gdebug) as they are
	used by the macro hpgl_call().

	Note there is a gcc specific variable to print out the name of the
	invoking function.  This needs to be #ifdef'd out or removed in
	the future.

	* pcl5.mak: fixed pgvector.c's dependency list, it was missing a
 	number of include files.  NOTE: gcc -M generates the dependencies
 	automatically.

Tue Dec 10 23:17:37 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgmand.h: added macro hpgl_call() that calls a function and
 	returns an error code if the code returned is less than 0.  Most
 	of the hpgl and gs functions return if the calling function is
 	less than 0 so this avoids cluttering up the code with the if
 	statement and debug code.

	Also added a status code - hpgl_ok.  

	* pgdraw.c and pgdraw.h: Extensive modifications for returning
	error codes.  
	
Mon Dec  2 13:36:04 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_set_graphics_dash_state): Needed to comment out
	gs_setdashadapt() and gs_setdotlength() as I don't have them.
	Would prefer an enumerated type for in lieue of the boolean
	parameter.

Mon Dec  2 00:05:38 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgdraw.c (hpgl_draw_current_path): removed attempted restore of
	pcl's ctm, as it was not correct and later discovered to be
	unnecessary.  

	* pgdraw.c (hpgl_add_point_to_path): used pcl_set_ctm() to
	initialize the pcl transformation that will be used to derive
	hpgl's transformation.

	* pginit.c (hpgl_do_reset): fixed duplicated block of code.

Sun Dec  1 14:25:29 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pggeom.c (hpgl_normalize_chord_angle): added floor() to truncate
	the angle.

	* pgdraw.c (hpgl_set_graphics_line_attribute_state): added large
	miter limit to do non beveled joins.  

	* pgdraw.c (hpgl_set_graphics_dash_state): uncommented dash API
	calls that are now supported in gs 4.34.

Wed Nov 27 17:21:50 1996  Henry Stiles  <henrys@meercat.dimensional.com>

	* pgconfig.c: removed second #include of gscoord.h.

	* pglfill.c (hpgl_PW): fixed logical error with pmax and pmin.
  	The previous code set pmax = pmin even if no pen was specified.
  	Now pmax is set to pmin if there is a pen number argument and the
 	argument is in the range 0 - pmax.

	* pcommand.h (value_set_float): changed name of macro parameter
	from fl to fr.  This macro is used in pginit.c to set up the
	picture frame commands.

	* pgmand.h: added comments to tell which file each HPGL/2 commands
	live in.

	* pgstate.h (pcl_hpgl_state_s): changed pen cap to ints.  A table
	in pgdraw.c is used to map the ints to appropriate gs graphics
	types.  Did this change a while back and did not document it.

	* pgdraw.h: changed *state to *pgls in prototypes.

	* pgdraw.h: missing prototype variable name y2 in hpgl_draw_line()
	declaration.

	* pgdraw.c: removed _a_ from from function names.

	* pgdraw.h: removed _a_ from from function names.

	* pgvector.h: removed _a_ from from function names.

	* pgdraw.c: Added gscoord.h for declarations of gs_initmatrix()
	and gs_scale().

	* pgdraw.c: Changed pu -> plu.

	* pggeom.h: Added #include math_h.h for sqrt.

	* pggeom.h: Changed pu -> plu.

	* pglfill.c: Added #include pgdraw.h for hpgl_draw_current_path()

	* pg*.[ch]: Removed blank lines at the end of files.  Bad habit of
	using CTRL-N in emacs at the bottom of files.

Fileset of 11/27/96
===================

PCL5
----

(LPD) Replaces pcl_plain_char with pcl_text, which takes a string rather
than a single character.  (pcommand.h, pcfont.c)

(LPD) Makes the parser look ahead to gather up runs of plain characters.
(pcparse.c)

(LPD) Fills in the pl_font_params_t properly for downloaded fonts.
(pcfont.h, pcsfont.c)

Fileset of 11/26/96
===================

PCL5
----

(RCD) Adds code for font selection.  (pcfont.c)

HP-GL/2
-------

(HAS) Makes all command procedures public so they can be called from other
commands.  (pgmand.h, pg*.c)

(HAS):

	* pginit.c (hpgl_do_reset): initialization of current hpgl/2 path
 	to empty.

	* pgdraw.h: corrected incorrect filename from copying template,
 	added #ifndef for multiple inclusion of .h, changed float ->
 	floatp for all arguments, made function names more readable, and
 	added comments for each prototype.

	* pggeom.h: same changes from pgdraw.h.  Added parenthesis to
 	macros so that expressions will evaluate correctly.

	* pgstate.h (pcl_hpgl_state_s): Moved statics that maintain the
 	current hpgl/2 path state to the hpgl state struct.

	* pgdraw.c (hpgl_add_point_to_path): Change to reflect previous
 	pgstate.h change.

	* pgdraw.c (hpgl_draw_current_path): Change to reflect previous
 	pgstate.h change.

	* pgdraw.c (hpgl_add_point_to_path): Added parameters to gs_func()
 	to make it a proper declaration.

	* pgdraw.c (hpgl_add_arc_to_path): removed function call to adjust
 	the chord angle.  Moved initializion of num_chords.

	* pggeom.c (hpgl_compute_arc_direction): changed algorithm to not
 	use trancendentals.  Also, only need the first and last point of
 	the arc for arguments.

	* pggeom.h: synced pggeom.h with pggeom.c change.

	* pgvector.c: style and indentation changes.

	* pginit.c (hpgl_do_reset): defaulted picture frame and plot size
 	to the pcl logical page size.

	* pgconfig.c (hpgl_DF): implemented.

	* pgconfig.c (hpgl_IN): implemented.

	* pginit.c (hpgl_do_reset): rewritten using mneumonics.  Still
	missing replot size.

	* pginit.h: removed hpgl_do_DF -- now there is just hpgl_DF().


	* pgmand.h: added hpgl mneumonics.  As many of the mneumonics are
	macros for collections of mneumonics it is useful to implement
	the macros in terms of the commands themselves.  This obviates the
	difficulty of having elements of the state data structure updated
	in different portions of the code. 


	* pglfill.c (hpgl_AC): done.


	* pglfill.c (hpgl_FT): Filled in default spacing and angle, though
	it is currently incomplete, see comments in the code.


	* pgdraw.c (hpgl_set_graphics_state): 
	Initialize have_path correctly. (OK - should work)
	Initialize pen number (SP) correctly. (OK)
	Initialize number pens (NP) correctly. (OK needs work)


	* pgdraw.c (hpgl_add_point_to_path): New code to initialize the
	current transformation matrix each time a gl/2 path is started.

	* pgdraw.c (hpgl_draw_current_path): initialize the graphics state
	each time we stroke or fill.


	* pgmand.h (hpgl_args_add_real):
	TODO: fix promotion to doubles.  ?? make scanner use doubles.


	* pglfill.c (hpgl_UL): UL with no parms executes LT;  Also code to
	update the both fixed and adaptive line patterns.

	* pgstate.h (pcl_hpgl_state_s): added boolean solid_line_type to
	the state.  False if a dashed line has been specified.

	* pgstate.h (pcl_hpgl_state_s): split line patterns into 2 data
 	structures one for adaptive and one for fixed.

	* pgdraw.c: gs graphics state updates for line types and line
 	attributes.

	* pgstate.h (pcl_hpgl_state_s): changed line joins and caps to
	type int instead of gs enumerated types.  The mapping to the gs
	types happens later.


	* pglfill.c (hpgl_LA): Added defaults for the no argument case.

----------------------------------------------------------------
