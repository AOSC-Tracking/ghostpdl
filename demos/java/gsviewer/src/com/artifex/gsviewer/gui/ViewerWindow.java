package com.artifex.gsviewer.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

import com.artifex.gsviewer.Document;
import com.artifex.gsviewer.Page;

/**
 * <p>Used to display documents into a window.</p>
 *
 * <p>Partially a auto-generated form using NetBeans.</p>
 */
public class ViewerWindow extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	/**
	 * The gap between each page in the main viewer, in pixels.
	 */
	public static final int VIEWER_PAGE_GAP = 10;

	/**
	 * The gap between each page in the mini viewer, in pixels.
	 */
	public static final int MINI_VIEWER_PAGE_GAP = 10;

	private ViewerGUIListener guiListener;
	private int currentPage, maxPage;
	private double currentZoom;

	private Document loadedDocument;
	private ScrollMap scrollMap;
	private List<PagePanel> viewerPagePanels;
	private List<PagePanel> miniViewerPagePanels;

	/**
	 * Creates new ViewerWindow.
	 */
	public ViewerWindow() {
		this(null);
	}

	/**
	 * Creates a new ViewerWindow with a GUIListener.
	 *
	 * @param listener A ViewerGUIListener.
	 */
	public ViewerWindow(final ViewerGUIListener listener) {
		initComponents();
		this.currentPage = 0;
		this.maxPage = 0;
		this.currentZoom = 1.0;
		this.viewerPagePanels = new ArrayList<>();
		this.miniViewerPagePanels = new ArrayList<>();

		this.viewerScrollPane.getVerticalScrollBar().addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) { }

			@Override
			public void mousePressed(MouseEvent e) { }

			@Override
			public void mouseReleased(MouseEvent e) {
				if (scrollMap != null) {
					final int page = scrollMap.getCurrentPage();
					currentPage = page;
					assumePage(page);
				}
			}

			@Override
			public void mouseEntered(MouseEvent e) { }

			@Override
			public void mouseExited(MouseEvent e) { }

		});

		setGUIListener(listener);

		setLocationRelativeTo(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

        viewerScrollPane = new javax.swing.JScrollPane();
        viewerContentPane = new javax.swing.JPanel();
        miniViewerScrollPane = new javax.swing.JScrollPane();
        miniViewerContentPane = new javax.swing.JPanel();
        zoomSlider = new javax.swing.JSlider();
        increaseZoomButton = new javax.swing.JButton();
        decreaseZoomButton = new javax.swing.JButton();
        lastPageButton = new javax.swing.JButton();
        maxPagesLabel = new javax.swing.JTextField();
        nextPageButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        pageNumberField = new javax.swing.JTextField();
        pageSlashLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        fileMenuSeparator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Viewer");
        setMinimumSize(new java.awt.Dimension(640, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        viewerScrollPane.setMinimumSize(new java.awt.Dimension(85, 110));

        javax.swing.GroupLayout viewerContentPaneLayout = new javax.swing.GroupLayout(viewerContentPane);
        viewerContentPane.setLayout(viewerContentPaneLayout);
        viewerContentPaneLayout.setHorizontalGroup(
            viewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        viewerContentPaneLayout.setVerticalGroup(
            viewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );

        viewerScrollPane.setViewportView(viewerContentPane);

        miniViewerScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout miniViewerContentPaneLayout = new javax.swing.GroupLayout(miniViewerContentPane);
        miniViewerContentPane.setLayout(miniViewerContentPaneLayout);
        miniViewerContentPaneLayout.setHorizontalGroup(
            miniViewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
        );
        miniViewerContentPaneLayout.setVerticalGroup(
            miniViewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );

        miniViewerScrollPane.setViewportView(miniViewerContentPane);

        zoomSlider.setMajorTickSpacing(25);
        zoomSlider.setMinorTickSpacing(5);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setSnapToTicks(true);
        zoomSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
			public void mouseReleased(java.awt.event.MouseEvent evt) {
                zoomSliderMouseReleased(evt);
            }
        });

        increaseZoomButton.setText("+");
        increaseZoomButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseZoomButtonActionPerformed(evt);
            }
        });

        decreaseZoomButton.setText("-");
        decreaseZoomButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseZoomButtonActionPerformed(evt);
            }
        });

        lastPageButton.setText("<");
        lastPageButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastPageButtonActionPerformed(evt);
            }
        });

        maxPagesLabel.setEditable(false);
        maxPagesLabel.setText("0");

        nextPageButton.setText(">");
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        pageNumberField.setText("0");
        pageNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
			public void keyPressed(java.awt.event.KeyEvent evt) {
                pageNumberFieldKeyPressed(evt);
            }
        });

        pageSlashLabel.setText("/");

        fileMenu.setText("File");

        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        fileMenu.add(fileMenuSeparator);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(settingsMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(miniViewerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(decreaseZoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(increaseZoomButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastPageButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pageNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pageSlashLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxPagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(nextPageButton)
                                .addGap(2, 2, 2))
                            .addComponent(viewerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miniViewerScrollPane)
                    .addComponent(viewerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(decreaseZoomButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(increaseZoomButton)
                            .addComponent(nextPageButton)
                            .addComponent(maxPagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pageNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastPageButton)
                            .addComponent(pageSlashLabel)))
                    .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

	private void lastPageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_lastPageButtonActionPerformed
		if (maxPage > 0) {
			final int oldPage = currentPage;
			currentPage = Math.max(currentPage - 1, 1);
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
			if (scrollMap != null)
				scrollMap.scrollTo(currentPage);
			assumePage(currentPage);
		} else {
			pageNumberField.setText(new StringBuilder().append(0).toString());
		}
	}// GEN-LAST:event_lastPageButtonActionPerformed

	private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextPageButtonActionPerformed
		if (maxPage > 0) {
			final int oldPage = currentPage;
			currentPage = Math.min(currentPage + 1, maxPage);
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
			if (scrollMap != null)
				scrollMap.scrollTo(currentPage);
			assumePage(currentPage);
		} else {
			pageNumberField.setText(new StringBuilder().append(0).toString());
		}
	}// GEN-LAST:event_nextPageButtonActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
		if (guiListener != null)
			guiListener.onClosing();
	}// GEN-LAST:event_formWindowClosing

	private void pageNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_pageNumberFieldKeyPressed
		if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
			final String text = pageNumberField.getText();
			try {
				final int newPage = Integer.parseInt(text);
				if (newPage < 1 || newPage > maxPage)
					throw new IllegalArgumentException();
				final int oldPage = currentPage;
				this.currentPage = newPage;
				if (guiListener != null)
					guiListener.onPageChange(oldPage, currentPage);
				if (this.scrollMap != null) {
					scrollMap.scrollTo(newPage);
					assumePage(newPage);
				}
			} catch (IllegalArgumentException e) {
				System.err.println(new StringBuilder().append("Invalid page number \"").
						append(text).append('\"').toString());
			} finally {
				pageNumberField.setText(new StringBuilder().append(currentPage).toString());
			}
		}
	}// GEN-LAST:event_pageNumberFieldKeyPressed

	private void zoomSliderMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_zoomSliderMouseReleased
		final double sliderValue = zoomSlider.getValue() / 50.0;
		final double oldZoom = currentZoom;
		this.currentZoom = sliderValue;
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_zoomSliderMouseReleased

	private void increaseZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_increaseZoomButtonActionPerformed
		final double oldZoom = currentZoom;
		this.currentZoom = Math.min(Math.ceil((oldZoom * 10) + 1) / 10, 2.0);
		zoomSlider.setValue((int)(currentZoom * 50));
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_increaseZoomButtonActionPerformed

	private void decreaseZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_decreaseZoomButtonActionPerformed
		final double oldZoom = currentZoom;
		this.currentZoom = Math.max(Math.floor((oldZoom * 10) - 1) / 10, 0.0);
		zoomSlider.setValue((int)(currentZoom * 50));
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_decreaseZoomButtonActionPerformed

	private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openMenuActionPerformed
		if (guiListener != null)
			guiListener.onOpenFile();
	}// GEN-LAST:event_openMenuActionPerformed

	private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onCloseFile();
	}// GEN-LAST:event_closeMenuItemActionPerformed

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onClosing();
	}// GEN-LAST:event_exitMenuItemActionPerformed

	private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_settingsMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onSettingsOpen();
	}// GEN-LAST:event_settingsMenuItemActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem closeMenuItem;
	private javax.swing.JButton decreaseZoomButton;
	private javax.swing.JMenu editMenu;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JPopupMenu.Separator fileMenuSeparator;
	private javax.swing.JButton increaseZoomButton;
	private javax.swing.JButton lastPageButton;
	private javax.swing.JTextField maxPagesLabel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JPanel miniViewerContentPane;
	private javax.swing.JScrollPane miniViewerScrollPane;
	private javax.swing.JButton nextPageButton;
	private javax.swing.JMenuItem openMenu;
	private javax.swing.JTextField pageNumberField;
	private javax.swing.JLabel pageSlashLabel;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JMenuItem settingsMenuItem;
	private javax.swing.JPanel viewerContentPane;
	private javax.swing.JScrollPane viewerScrollPane;
	private javax.swing.JSlider zoomSlider;
	// End of variables declaration//GEN-END:variables

	private class PagePanel extends JPanel {

		private static final long serialVersionUID = 1L;

		private Object lock;
		private Page page;

		private PagePanel(final Page page) {
			this.lock = new Object();
			this.page = page;

			setPreferredSize(page.getSize());
			setMaximumSize(page.getSize());

			setBackground(Color.WHITE);

			setDoubleBuffered(false);
			pack();
		}

		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			synchronized (lock) {
				if (page != null) {
					Dimension pageSize = page.getSize();
					BufferedImage img = page.getDisplayableImage();
					if (img != null)
						g.drawImage(img == page.getLowResImage() ?
								img.getScaledInstance(pageSize.width, pageSize.height, Image.SCALE_FAST) :
									img, 0, 0, this);

				}
			}
		}
	}

	private class MiniViewerActionListener implements ActionListener {

		private final int pageNum;

		private MiniViewerActionListener(int pageNum) {
			this.pageNum = pageNum;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			ViewerWindow.this.scrollMap.scrollTo(pageNum);
			assumePage(pageNum);
		}

	}

	@Override
	public void validate() {
		super.validate();
		if (this.scrollMap != null) {
			this.scrollMap.genMap(1.0);
			assumePage(this.currentPage = this.scrollMap.getCurrentPage());
		}
	}

	/**
	 * Sets sthe ViewerGUIListener the window should use.
	 *
	 * @param listener A listener.
	 */
	public void setGUIListener(final ViewerGUIListener listener) {
		this.guiListener = listener;
		listener.onViewerAdd(this);
	}

	/**
	 * Sets the page which should be jumped to.
	 *
	 * @param newPage A page.
	 */
	public void setPage(final int newPage) {
		try {
			if (newPage < 1 || newPage > maxPage)
				throw new IllegalArgumentException();
			final int oldPage = currentPage;
			currentPage = newPage;
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
			if (scrollMap != null) {
				scrollMap.scrollTo(newPage);
				assumePage(newPage);
			}
		} catch (IllegalArgumentException e) {
			System.err.println(new StringBuilder().append("Invalid page number \"").
					append(newPage).append('\"').toString());
		} finally {
			pageNumberField.setText(new StringBuilder().append(currentPage).toString());
		}
	}

	/**
	 * Sets the progress of the progress bar in the window.
	 *
	 * @param progress The amount of progress (0-100).
	 */
	public void setLoadProgress(final int progress) {
		progressBar.setValue(progress);
	}

	/**
	 * Loads a document into the viewer.
	 *
	 * @param document The document to load, if <code>null</code> the current
	 * document will be unloaded.
	 */
	public void loadDocumentToViewer(final Document document) {
		final Dimension oldSize = getSize();
		unloadViewerDocument();
		if (document == null)
			return;

		this.loadedDocument = document;
		viewerContentPane.setLayout(new BoxLayout(viewerContentPane, BoxLayout.Y_AXIS));

		for (final Page page : document) {
			final PagePanel panel = new PagePanel(page);
			viewerContentPane.add(panel);
			viewerContentPane.add(Box.createVerticalStrut(VIEWER_PAGE_GAP));

			viewerPagePanels.add(panel);
		}

		miniViewerContentPane.setLayout(new BoxLayout(miniViewerContentPane, BoxLayout.Y_AXIS));

		int pageNum = 1;
		for (final Page page : document) {
			ImageIcon icon = new ImageIcon(page.getLowResImage());
			JButton button = new JButton(icon);
			button.setPreferredSize(page.getLowResSize());
			button.addActionListener(new MiniViewerActionListener(pageNum++));

			miniViewerContentPane.add(button);
			miniViewerContentPane.add(Box.createVerticalStrut(MINI_VIEWER_PAGE_GAP));
		}

		this.scrollMap = new ScrollMap(document, this, VIEWER_PAGE_GAP);
		this.viewerScrollPane.getVerticalScrollBar().setValue(0);

		assumePage(this.currentPage = 1);
		assumeMaxPages(this.maxPage = document.size());

		setSize(oldSize);

		setTitle("Viewer - " + document.getName());
	}

	public void unloadViewerDocument() {
		this.loadedDocument = null;
		this.scrollMap = null;
		this.assumePage(0);
		this.assumeMaxPages(0);
		setTitle("Viewer");

		for (final PagePanel panel : viewerPagePanels) {
			synchronized (panel.lock) {
				panel.page = null;
			}
		}
		viewerContentPane.removeAll();
		viewerPagePanels.clear();

		for (final PagePanel panel : miniViewerPagePanels) {
			synchronized (panel.lock) {
				panel.page = null;
			}
		}
		miniViewerContentPane.removeAll();
		miniViewerPagePanels.clear();

		SwingUtilities.invokeLater(() -> {
			viewerContentPane.revalidate();
			viewerContentPane.repaint();

			miniViewerContentPane.revalidate();
			miniViewerContentPane.repaint();
		});
	}

	public Document getLoadedDocument() {
		return loadedDocument;
	}

	public JComponent getPageComponent(final int pageNum) {
		return viewerPagePanels.get(pageNum - 1);
	}

	public JScrollPane getViewerScrollPane() {
		return viewerScrollPane;
	}

	private void assumePage(int pageNum) {
		this.pageNumberField.setText(new StringBuilder().append(pageNum).toString());
	}

	private void assumeMaxPages(int pageCount) {
		this.maxPagesLabel.setText(new StringBuilder().append(pageCount).toString());
	}
}
