package com.artifex.gsviewer.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.RepaintManager;

import com.artifex.gsviewer.Document;
import com.artifex.gsviewer.Page;

/**
 * Auto-generated form using NetBeans.
 */
public class ViewerWindow extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;

	private ViewerGUIListener guiListener;
	private int currentPage, maxPage;
	private double currentZoom;

	private Document loadedDocument;
	private List<PagePanel> viewerPagePanels;
	private List<PagePanel> miniViewerPagePanels;

	/**
	 * Creates new form ViewerWindow
	 */
	public ViewerWindow() {
		this(null);
	}

	public ViewerWindow(final ViewerGUIListener listener) {
		initComponents();
		this.currentPage = 0;
		this.maxPage = 0;
		this.currentZoom = 1.0;
		this.viewerPagePanels = new ArrayList<>();
		this.miniViewerPagePanels = new ArrayList<>();

		setGUIListener(listener);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

        viewerScrollPane = new javax.swing.JScrollPane();
        viewerContentPane = new javax.swing.JPanel();
        miniViewerScrollPane = new javax.swing.JScrollPane();
        miniViewerContentPane = new javax.swing.JPanel();
        zoomSlider = new javax.swing.JSlider();
        increaseZoomButton = new javax.swing.JButton();
        decreaseZoomButton = new javax.swing.JButton();
        lastPageButton = new javax.swing.JButton();
        maxPagesLabel = new javax.swing.JTextField();
        nextPageButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        pageNumberField = new javax.swing.JTextField();
        pageSlashLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        fileMenuSeparator = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Viewer");
        setMinimumSize(new java.awt.Dimension(640, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
			public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        viewerScrollPane.setMinimumSize(new java.awt.Dimension(85, 110));

        javax.swing.GroupLayout viewerContentPaneLayout = new javax.swing.GroupLayout(viewerContentPane);
        viewerContentPane.setLayout(viewerContentPaneLayout);
        viewerContentPaneLayout.setHorizontalGroup(
            viewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );
        viewerContentPaneLayout.setVerticalGroup(
            viewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );

        viewerScrollPane.setViewportView(viewerContentPane);

        miniViewerScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout miniViewerContentPaneLayout = new javax.swing.GroupLayout(miniViewerContentPane);
        miniViewerContentPane.setLayout(miniViewerContentPaneLayout);
        miniViewerContentPaneLayout.setHorizontalGroup(
            miniViewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
        );
        miniViewerContentPaneLayout.setVerticalGroup(
            miniViewerContentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 639, Short.MAX_VALUE)
        );

        miniViewerScrollPane.setViewportView(miniViewerContentPane);

        zoomSlider.setMajorTickSpacing(25);
        zoomSlider.setMinorTickSpacing(5);
        zoomSlider.setPaintTicks(true);
        zoomSlider.setSnapToTicks(true);
        zoomSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
			public void mouseReleased(java.awt.event.MouseEvent evt) {
                zoomSliderMouseReleased(evt);
            }
        });

        increaseZoomButton.setText("+");
        increaseZoomButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseZoomButtonActionPerformed(evt);
            }
        });

        decreaseZoomButton.setText("-");
        decreaseZoomButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseZoomButtonActionPerformed(evt);
            }
        });

        lastPageButton.setText("<");
        lastPageButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastPageButtonActionPerformed(evt);
            }
        });

        maxPagesLabel.setEditable(false);
        maxPagesLabel.setText("0");

        nextPageButton.setText(">");
        nextPageButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextPageButtonActionPerformed(evt);
            }
        });

        pageNumberField.setText("0");
        pageNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
			public void keyPressed(java.awt.event.KeyEvent evt) {
                pageNumberFieldKeyPressed(evt);
            }
        });

        pageSlashLabel.setText("/");

        fileMenu.setText("File");

        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);
        fileMenu.add(fileMenuSeparator);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(settingsMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(miniViewerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(decreaseZoomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(increaseZoomButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lastPageButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pageNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pageSlashLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxPagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(nextPageButton)
                                .addGap(2, 2, 2))
                            .addComponent(viewerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miniViewerScrollPane)
                    .addComponent(viewerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(decreaseZoomButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(increaseZoomButton)
                            .addComponent(nextPageButton)
                            .addComponent(maxPagesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pageNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastPageButton)
                            .addComponent(pageSlashLabel)))
                    .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

	private void lastPageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_lastPageButtonActionPerformed
		if (maxPage > 0) {
			final int oldPage = currentPage;
			currentPage = Math.max(currentPage - 1, 1);
			pageNumberField.setText(new StringBuilder().append(currentPage).toString());
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
		} else {
			pageNumberField.setText(new StringBuilder().append(0).toString());
		}
	}// GEN-LAST:event_lastPageButtonActionPerformed

	private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_nextPageButtonActionPerformed
		if (maxPage > 0) {
			final int oldPage = currentPage;
			currentPage = Math.min(currentPage + 1, maxPage);
			pageNumberField.setText(new StringBuilder().append(currentPage).toString());
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
		} else {
			pageNumberField.setText(new StringBuilder().append(0).toString());
		}
	}// GEN-LAST:event_nextPageButtonActionPerformed

	private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
		if (guiListener != null)
			guiListener.onClosing();
	}// GEN-LAST:event_formWindowClosing

	private void pageNumberFieldKeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_pageNumberFieldKeyPressed
		if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
			final String text = pageNumberField.getText();
			try {
				final int newPage = Integer.parseInt(text);
				if (newPage < 1 || newPage > maxPage)
					throw new IllegalArgumentException();
				final int oldPage = currentPage;
				this.currentPage = newPage;
				if (guiListener != null)
					guiListener.onPageChange(oldPage, currentPage);
			} catch (IllegalArgumentException e) {
				System.err.println(new StringBuilder().append("Invalid page number \"").
						append(text).append('\"').toString());
			} finally {
				pageNumberField.setText(new StringBuilder().append(currentPage).toString());
			}
		}
	}// GEN-LAST:event_pageNumberFieldKeyPressed

	private void zoomSliderMouseReleased(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_zoomSliderMouseReleased
		final double sliderValue = zoomSlider.getValue() / 50.0;
		final double oldZoom = currentZoom;
		this.currentZoom = sliderValue;
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_zoomSliderMouseReleased

	private void increaseZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_increaseZoomButtonActionPerformed
		final double oldZoom = currentZoom;
		this.currentZoom = Math.min(Math.ceil((oldZoom * 10) + 1) / 10, 2.0);
		zoomSlider.setValue((int)(currentZoom * 50));
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_increaseZoomButtonActionPerformed

	private void decreaseZoomButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_decreaseZoomButtonActionPerformed
		final double oldZoom = currentZoom;
		this.currentZoom = Math.max(Math.floor((oldZoom * 10) - 1) / 10, 0.0);
		zoomSlider.setValue((int)(currentZoom * 50));
		if (guiListener != null && oldZoom != currentZoom)
			guiListener.onZoomChange(oldZoom, currentZoom);
	}// GEN-LAST:event_decreaseZoomButtonActionPerformed

	private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_openMenuActionPerformed
		if (guiListener != null)
			guiListener.onOpenFile();
	}// GEN-LAST:event_openMenuActionPerformed

	private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onCloseFile();
	}// GEN-LAST:event_closeMenuItemActionPerformed

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onClosing();
	}// GEN-LAST:event_exitMenuItemActionPerformed

	private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_settingsMenuItemActionPerformed
		if (guiListener != null)
			guiListener.onSettingsOpen();
	}// GEN-LAST:event_settingsMenuItemActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem closeMenuItem;
	private javax.swing.JButton decreaseZoomButton;
	private javax.swing.JMenu editMenu;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JPopupMenu.Separator fileMenuSeparator;
	private javax.swing.JButton increaseZoomButton;
	private javax.swing.JButton lastPageButton;
	private javax.swing.JTextField maxPagesLabel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JPanel miniViewerContentPane;
	private javax.swing.JScrollPane miniViewerScrollPane;
	private javax.swing.JButton nextPageButton;
	private javax.swing.JMenuItem openMenu;
	private javax.swing.JTextField pageNumberField;
	private javax.swing.JLabel pageSlashLabel;
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JMenuItem settingsMenuItem;
	private javax.swing.JPanel viewerContentPane;
	private javax.swing.JScrollPane viewerScrollPane;
	private javax.swing.JSlider zoomSlider;
	// End of variables declaration//GEN-END:variables

	private class PagePanel extends JPanel {

		private static final long serialVersionUID = 1L;

		private static final int	VIEWER_MODE = 0,
									MINI_VIEWER_MODE = 1;

		private Object lock;
		private Page page;
		private int mode;

		private PagePanel(final Page page, final Dimension size, final int mode) {
			this.lock = new Object();
			this.page = page;
			this.mode = mode;
			setPreferredSize(size);

			setBackground(Color.WHITE);

			pack();
		}

		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			synchronized (lock) {
				if (page != null) {
					Dimension size = getSize();
					BufferedImage img;
					switch (mode) {
					case VIEWER_MODE:
						img = page.getDisplayableImage();
						if (img != null)
							g.drawImage(img.getScaledInstance(size.width, size.height, Image.SCALE_FAST), 0, 0, this);
						break;
					case MINI_VIEWER_MODE:
						img = page.getLowResImage();
						if (img != null)
							g.drawImage(img, 0, 0, this);
						break;
					default:
						throw new IllegalStateException("Illegal mode");
					}
				}
			}
		}

		@Override
		public void invalidate() {
			super.invalidate();
			System.out.println("Invalidated!");
		}
	}

	public void setGUIListener(final ViewerGUIListener listener) {
		this.guiListener = listener;
		listener.onViewerAdd(this);
	}

	public void setPage(final int newPage) {
		try {
			if (newPage < 1 || newPage > maxPage)
				throw new IllegalArgumentException();
			final int oldPage = currentPage;
			currentPage = newPage;
			if (guiListener != null)
				guiListener.onPageChange(oldPage, currentPage);
		} catch (IllegalArgumentException e) {
			System.err.println(new StringBuilder().append("Invalid page number \"").
					append(newPage).append('\"').toString());
		} finally {
			pageNumberField.setText(new StringBuilder().append(currentPage).toString());
		}
	}

	public void setMaxPage(final int max) {
		this.maxPage = max;
	}

	public void setLoadProgress(final int progress) {
		progressBar.setValue(progress);
	}

	public void loadDocumentToViewer(final Document document) {
		if (document == null) {
			unloadViewerDocument();
			return;
		}

		for (final PagePanel panel : viewerPagePanels) {
			synchronized (panel.lock) {
				panel.page = null;
			}
		}
		viewerContentPane.removeAll();
		viewerPagePanels.clear();

		for (final PagePanel panel : miniViewerPagePanels) {
			synchronized (panel.lock) {
				panel.page = null;
			}
		}
		miniViewerContentPane.removeAll();
		viewerPagePanels.clear();

		this.loadedDocument = document;

		setResizable(false);

		viewerContentPane.setLayout(new BoxLayout(viewerContentPane, BoxLayout.Y_AXIS));

		for (final Page page : document) {
			final PagePanel panel = new PagePanel(page, page.getSize(), PagePanel.VIEWER_MODE);
			viewerContentPane.add(panel);
			viewerContentPane.add(Box.createVerticalStrut(10));

			viewerPagePanels.add(panel);
		}

		miniViewerContentPane.setLayout(new BoxLayout(miniViewerContentPane, BoxLayout.Y_AXIS));

		for (final Page page : document) {
			final PagePanel panel = new PagePanel(page, page.getLowResSize(), PagePanel.MINI_VIEWER_MODE);
			miniViewerContentPane.add(panel);
			miniViewerContentPane.add(Box.createVerticalStrut(10));

			miniViewerPagePanels.add(panel);
		}

		setResizable(true);
	}

	public void unloadViewerDocument() {
		this.loadedDocument = null;
	}

	public Document getLoadedDocument() {
		return loadedDocument;
	}
}
